/*
 * Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
 * 
 * On Sun Sep 10 08:00:44 UTC 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbEx5.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("    if signed: %0d * %0d DUT gave %0d", 37u);
static std::string const __str_literal_5("    if signed: %0d * %0d DUT gave %0d instead of %0d",
					 52u);
static std::string const __str_literal_3("    if unsigned: %0d * %0d DUT gave %0d", 39u);
static std::string const __str_literal_6("    if unsigned: %0d * %0d DUT gave %0d instead of %0d",
					 54u);
static std::string const __str_literal_4("FAILED case %0d", 15u);
static std::string const __str_literal_8("FAILED due to cycle limit", 25u);
static std::string const __str_literal_7("PASSED %0d test cases in %0d cycles", 35u);
static std::string const __str_literal_1("PASSED case %0d", 15u);


/* Constructor */
MOD_mkTbEx5::MOD_mkTbEx5(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_mod_a(simHdl, "mod_a", this, 8u),
    INST_mod_b(simHdl, "mod_b", this, 8u),
    INST_mod_i(simHdl, "mod_i", this, 4u, (tUInt8)9u, (tUInt8)0u),
    INST_mod_prod(simHdl, "mod_prod", this, 8u),
    INST_mod_tp(simHdl, "mod_tp", this, 8u),
    INST_tb_cycle(simHdl, "tb_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_tb_feed_count(simHdl, "tb_feed_count", this, 32u, 0u, (tUInt8)0u),
    INST_tb_operands_fifo(simHdl, "tb_operands_fifo", this, 16u, 4u, (tUInt8)1u, 0u),
    INST_tb_randomA_ignore(simHdl, "tb_randomA_ignore", this, 8u, (tUInt8)0u),
    INST_tb_randomA_initialized(simHdl, "tb_randomA_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomA_zaz(simHdl, "tb_randomA_zaz", this, 8u, (tUInt8)0u),
    INST_tb_randomB_ignore(simHdl, "tb_randomB_ignore", this, 8u, (tUInt8)0u),
    INST_tb_randomB_initialized(simHdl, "tb_randomB_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomB_zaz(simHdl, "tb_randomB_zaz", this, 8u, (tUInt8)0u),
    INST_tb_read_count(simHdl, "tb_read_count", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h1188(2863311530u),
    DEF_v__h811(2863311530u)
{
  symbol_count = 46u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbEx5::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_mod_mulStep", SYM_DEF, &DEF_CAN_FIRE_RL_mod_mulStep, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_tb_feed", SYM_DEF, &DEF_CAN_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_tb_read", SYM_DEF, &DEF_CAN_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[8u], "i__h225", SYM_DEF, &DEF_i__h225, 4u);
  init_symbol(&symbols[9u], "mod_a", SYM_MODULE, &INST_mod_a);
  init_symbol(&symbols[10u], "mod_b", SYM_MODULE, &INST_mod_b);
  init_symbol(&symbols[11u], "mod_i", SYM_MODULE, &INST_mod_i);
  init_symbol(&symbols[12u], "mod_prod", SYM_MODULE, &INST_mod_prod);
  init_symbol(&symbols[13u], "mod_tp", SYM_MODULE, &INST_mod_tp);
  init_symbol(&symbols[14u], "RL_mod_mulStep", SYM_RULE);
  init_symbol(&symbols[15u], "RL_tb_feed", SYM_RULE);
  init_symbol(&symbols[16u], "RL_tb_monitor_test", SYM_RULE);
  init_symbol(&symbols[17u], "RL_tb_randomA_every", SYM_RULE);
  init_symbol(&symbols[18u], "RL_tb_randomA_every_1", SYM_RULE);
  init_symbol(&symbols[19u], "RL_tb_randomB_every", SYM_RULE);
  init_symbol(&symbols[20u], "RL_tb_randomB_every_1", SYM_RULE);
  init_symbol(&symbols[21u], "RL_tb_read", SYM_RULE);
  init_symbol(&symbols[22u], "tb_cycle", SYM_MODULE, &INST_tb_cycle);
  init_symbol(&symbols[23u], "tb_feed_count", SYM_MODULE, &INST_tb_feed_count);
  init_symbol(&symbols[24u], "tb_operands_fifo", SYM_MODULE, &INST_tb_operands_fifo);
  init_symbol(&symbols[25u], "tb_randomA_ignore", SYM_MODULE, &INST_tb_randomA_ignore);
  init_symbol(&symbols[26u], "tb_randomA_initialized", SYM_MODULE, &INST_tb_randomA_initialized);
  init_symbol(&symbols[27u], "tb_randomA_zaz", SYM_MODULE, &INST_tb_randomA_zaz);
  init_symbol(&symbols[28u], "tb_randomB_ignore", SYM_MODULE, &INST_tb_randomB_ignore);
  init_symbol(&symbols[29u], "tb_randomB_initialized", SYM_MODULE, &INST_tb_randomB_initialized);
  init_symbol(&symbols[30u], "tb_randomB_zaz", SYM_MODULE, &INST_tb_randomB_zaz);
  init_symbol(&symbols[31u], "tb_read_count", SYM_MODULE, &INST_tb_read_count);
  init_symbol(&symbols[32u], "v__h1261", SYM_DEF, &DEF_v__h1261, 8u);
  init_symbol(&symbols[33u], "v__h885", SYM_DEF, &DEF_v__h885, 8u);
  init_symbol(&symbols[34u], "WILL_FIRE_RL_mod_mulStep", SYM_DEF, &DEF_WILL_FIRE_RL_mod_mulStep, 1u);
  init_symbol(&symbols[35u], "WILL_FIRE_RL_tb_feed", SYM_DEF, &DEF_WILL_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[40u],
	      "WILL_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[41u], "WILL_FIRE_RL_tb_read", SYM_DEF, &DEF_WILL_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[42u], "x__h1662", SYM_DEF, &DEF_x__h1662, 32u);
  init_symbol(&symbols[43u], "x__h2641", SYM_DEF, &DEF_x__h2641, 32u);
  init_symbol(&symbols[44u], "x_wget__h1131", SYM_DEF, &DEF_x_wget__h1131, 8u);
  init_symbol(&symbols[45u], "x_wget__h754", SYM_DEF, &DEF_x_wget__h754, 8u);
}


/* Rule actions */

void MOD_mkTbEx5::RL_mod_mulStep()
{
  tUInt8 DEF_x__h260;
  tUInt8 DEF_tmp__h181;
  tUInt8 DEF_mod_i_BITS_2_TO_0___d4;
  tUInt8 DEF_mod_prod_BITS_7_TO_1___h334;
  tUInt32 DEF_sum__h182;
  tUInt8 DEF_x__h196;
  tUInt8 DEF__read__h46;
  tUInt8 DEF_bs__h227;
  DEF_x__h246 = INST_mod_tp.METH_read();
  DEF__read__h98 = INST_mod_prod.METH_read();
  DEF_bs__h227 = INST_mod_b.METH_read();
  DEF__read__h46 = INST_mod_a.METH_read();
  DEF_i__h225 = INST_mod_i.METH_read();
  DEF_mod_prod_BITS_7_TO_1___h334 = (tUInt8)(DEF__read__h98 >> 1u);
  DEF_mod_i_BITS_2_TO_0___d4 = (tUInt8)((tUInt8)7u & DEF_i__h225);
  DEF_tmp__h181 = primExtract8(1u,
			       8u,
			       (tUInt8)(DEF_bs__h227),
			       3u,
			       (tUInt8)(DEF_mod_i_BITS_2_TO_0___d4),
			       3u,
			       (tUInt8)(DEF_mod_i_BITS_2_TO_0___d4)) ? DEF__read__h46 : (tUInt8)0u;
  DEF_sum__h182 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_tmp__h181))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h246))));
  DEF_x__h196 = (tUInt8)(DEF_sum__h182 >> 1u);
  DEF_x__h339 = (tUInt8)15u & (DEF_i__h225 + (tUInt8)1u);
  DEF_x__h260 = (tUInt8)255u & ((((tUInt8)((tUInt8)1u & DEF_sum__h182)) << 7u) | DEF_mod_prod_BITS_7_TO_1___h334);
  INST_mod_tp.METH_write(DEF_x__h196);
  INST_mod_prod.METH_write(DEF_x__h260);
  INST_mod_i.METH_write(DEF_x__h339);
}

void MOD_mkTbEx5::RL_tb_randomA_every()
{
  tUInt8 DEF_new_value__h853;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h811 = rand32();
  DEF_new_value__h853 = (tUInt8)((tUInt8)255u & DEF_v__h811);
  INST_tb_randomA_zaz.METH_wset(DEF_new_value__h853);
}

void MOD_mkTbEx5::RL_tb_randomA_every_1()
{
  DEF_x_wget__h754 = INST_tb_randomA_zaz.METH_wget();
  DEF_v__h885 = INST_tb_randomA_zaz.METH_whas() ? DEF_x_wget__h754 : (tUInt8)0u;
  INST_tb_randomA_ignore.METH_wset(DEF_v__h885);
}

void MOD_mkTbEx5::RL_tb_randomB_every()
{
  tUInt8 DEF_new_value__h1230;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1188 = rand32();
  DEF_new_value__h1230 = (tUInt8)((tUInt8)255u & DEF_v__h1188);
  INST_tb_randomB_zaz.METH_wset(DEF_new_value__h1230);
}

void MOD_mkTbEx5::RL_tb_randomB_every_1()
{
  DEF_x_wget__h1131 = INST_tb_randomB_zaz.METH_wget();
  DEF_v__h1261 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1131 : (tUInt8)0u;
  INST_tb_randomB_ignore.METH_wset(DEF_v__h1261);
}

void MOD_mkTbEx5::RL_tb_feed()
{
  tUInt32 DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d48;
  tUInt32 DEF_x__h1643;
  tUInt8 DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d47;
  DEF_x__h1662 = INST_tb_feed_count.METH_read();
  DEF_x_wget__h1131 = INST_tb_randomB_zaz.METH_wget();
  DEF_x_wget__h754 = INST_tb_randomA_zaz.METH_wget();
  DEF_v__h1261 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1131 : (tUInt8)0u;
  DEF_v__h885 = INST_tb_randomA_zaz.METH_whas() ? DEF_x_wget__h754 : (tUInt8)0u;
  DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32 = DEF_v__h885 == (tUInt8)128u;
  DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33 = DEF_v__h1261 == (tUInt8)128u;
  DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d47 = !DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32 && !DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33;
  DEF_x__h1643 = DEF_x__h1662 + 1u;
  DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d48 = 65535u & ((((tUInt32)(DEF_v__h885)) << 8u) | (tUInt32)(DEF_v__h1261));
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d47)
    INST_tb_operands_fifo.METH_enq(DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d48);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d47)
    INST_mod_a.METH_write(DEF_v__h885);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d47)
    INST_mod_b.METH_write(DEF_v__h1261);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d47)
    INST_mod_prod.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d47)
    INST_mod_tp.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d47)
    INST_mod_i.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d47)
    INST_tb_feed_count.METH_write(DEF_x__h1643);
}

void MOD_mkTbEx5::RL_tb_read()
{
  tUInt32 DEF_x__h2517;
  tUInt8 DEF_NOT_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operan_ETC___d108;
  tUInt32 DEF_IF_tb_operands_fifo_first__8_BIT_0_6_THEN_0_CO_ETC___d69;
  tUInt32 DEF_IF_tb_operands_fifo_first__8_BIT_1_5_THEN_IF_t_ETC___d72;
  tUInt32 DEF_IF_tb_operands_fifo_first__8_BIT_2_4_THEN_IF_t_ETC___d76;
  tUInt32 DEF_IF_tb_operands_fifo_first__8_BIT_3_3_THEN_IF_t_ETC___d80;
  tUInt32 DEF_IF_tb_operands_fifo_first__8_BIT_4_2_THEN_IF_t_ETC___d85;
  tUInt32 DEF_IF_tb_operands_fifo_first__8_BIT_5_1_THEN_IF_t_ETC___d90;
  tUInt32 DEF_IF_tb_operands_fifo_first__8_BIT_6_0_THEN_IF_t_ETC___d96;
  tUInt32 DEF_tb_operands_fifo_first____d58;
  tUInt8 DEF_a__h1682;
  tUInt8 DEF_signed_tb_operands_fifo_first__8_BITS_15_TO_8_7___d104;
  tUInt8 DEF_b__h1683;
  tUInt8 DEF_signed_tb_operands_fifo_first__8_BITS_7_TO_0_05___d106;
  tUInt32 DEF_v__h1707;
  tUInt32 DEF_signed_mod_tp_CONCAT_mod_prod_4_7___d107;
  tUInt32 DEF_expected__h1748;
  tUInt32 DEF_signed_IF_tb_operands_fifo_first__8_BIT_7_9_T_ETC___d109;
  tUInt8 DEF_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operands_f_ETC___d103;
  DEF_x__h2641 = INST_tb_read_count.METH_read();
  DEF_tb_operands_fifo_first____d58 = INST_tb_operands_fifo.METH_first();
  DEF_b__h1683 = (tUInt8)((tUInt8)255u & DEF_tb_operands_fifo_first____d58);
  DEF_signed_tb_operands_fifo_first__8_BITS_7_TO_0_05___d106 = DEF_b__h1683;
  DEF_a__h1682 = (tUInt8)(DEF_tb_operands_fifo_first____d58 >> 8u);
  DEF_signed_tb_operands_fifo_first__8_BITS_15_TO_8_7___d104 = DEF_a__h1682;
  DEF_x__h246 = INST_mod_tp.METH_read();
  DEF__read__h98 = INST_mod_prod.METH_read();
  DEF_v__h1707 = 65535u & ((((tUInt32)(DEF_x__h246)) << 8u) | (tUInt32)(DEF__read__h98));
  DEF_signed_mod_tp_CONCAT_mod_prod_4_7___d107 = DEF_v__h1707;
  DEF_i__h225 = INST_mod_i.METH_read();
  DEF_IF_tb_operands_fifo_first__8_BIT_0_6_THEN_0_CO_ETC___d69 = (tUInt8)((tUInt8)1u & DEF_tb_operands_fifo_first____d58) ? 65535u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_a__h1682)) : 0u;
  DEF_IF_tb_operands_fifo_first__8_BIT_1_5_THEN_IF_t_ETC___d72 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d58 >> 1u)) ? 65535u & (DEF_IF_tb_operands_fifo_first__8_BIT_0_6_THEN_0_CO_ETC___d69 + (65535u & (((((tUInt32)((tUInt8)0u)) << 9u) | (((tUInt32)(DEF_a__h1682)) << 1u)) | (tUInt32)((tUInt8)0u)))) : DEF_IF_tb_operands_fifo_first__8_BIT_0_6_THEN_0_CO_ETC___d69;
  DEF_IF_tb_operands_fifo_first__8_BIT_2_4_THEN_IF_t_ETC___d76 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d58 >> 2u)) ? 65535u & (DEF_IF_tb_operands_fifo_first__8_BIT_1_5_THEN_IF_t_ETC___d72 + (65535u & (((((tUInt32)((tUInt8)0u)) << 10u) | (((tUInt32)(DEF_a__h1682)) << 2u)) | (tUInt32)((tUInt8)0u)))) : DEF_IF_tb_operands_fifo_first__8_BIT_1_5_THEN_IF_t_ETC___d72;
  DEF_IF_tb_operands_fifo_first__8_BIT_3_3_THEN_IF_t_ETC___d80 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d58 >> 3u)) ? 65535u & (DEF_IF_tb_operands_fifo_first__8_BIT_2_4_THEN_IF_t_ETC___d76 + (65535u & (((((tUInt32)((tUInt8)0u)) << 11u) | (((tUInt32)(DEF_a__h1682)) << 3u)) | (tUInt32)((tUInt8)0u)))) : DEF_IF_tb_operands_fifo_first__8_BIT_2_4_THEN_IF_t_ETC___d76;
  DEF_IF_tb_operands_fifo_first__8_BIT_4_2_THEN_IF_t_ETC___d85 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d58 >> 4u)) ? 65535u & (DEF_IF_tb_operands_fifo_first__8_BIT_3_3_THEN_IF_t_ETC___d80 + (65535u & (((((tUInt32)((tUInt8)0u)) << 12u) | (((tUInt32)(DEF_a__h1682)) << 4u)) | (tUInt32)((tUInt8)0u)))) : DEF_IF_tb_operands_fifo_first__8_BIT_3_3_THEN_IF_t_ETC___d80;
  DEF_IF_tb_operands_fifo_first__8_BIT_5_1_THEN_IF_t_ETC___d90 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d58 >> 5u)) ? 65535u & (DEF_IF_tb_operands_fifo_first__8_BIT_4_2_THEN_IF_t_ETC___d85 + (65535u & (((((tUInt32)((tUInt8)0u)) << 13u) | (((tUInt32)(DEF_a__h1682)) << 5u)) | (tUInt32)((tUInt8)0u)))) : DEF_IF_tb_operands_fifo_first__8_BIT_4_2_THEN_IF_t_ETC___d85;
  DEF_IF_tb_operands_fifo_first__8_BIT_6_0_THEN_IF_t_ETC___d96 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d58 >> 6u)) ? 65535u & (DEF_IF_tb_operands_fifo_first__8_BIT_5_1_THEN_IF_t_ETC___d90 + (65535u & (((((tUInt32)((tUInt8)0u)) << 14u) | (((tUInt32)(DEF_a__h1682)) << 6u)) | (tUInt32)((tUInt8)0u)))) : DEF_IF_tb_operands_fifo_first__8_BIT_5_1_THEN_IF_t_ETC___d90;
  DEF_expected__h1748 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d58 >> 7u)) ? 65535u & (DEF_IF_tb_operands_fifo_first__8_BIT_6_0_THEN_IF_t_ETC___d96 + (65535u & (((((tUInt32)((tUInt8)0u)) << 15u) | (((tUInt32)(DEF_a__h1682)) << 7u)) | (tUInt32)((tUInt8)0u)))) : DEF_IF_tb_operands_fifo_first__8_BIT_6_0_THEN_IF_t_ETC___d96;
  DEF_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operands_f_ETC___d103 = DEF_v__h1707 == DEF_expected__h1748;
  DEF_signed_IF_tb_operands_fifo_first__8_BIT_7_9_T_ETC___d109 = DEF_expected__h1748;
  DEF_NOT_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operan_ETC___d108 = !DEF_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operands_f_ETC___d103;
  DEF_x__h2517 = DEF_x__h2641 + 1u;
  INST_tb_operands_fifo.METH_deq();
  DEF_x__h339 = (tUInt8)15u & (DEF_i__h225 + (tUInt8)1u);
  INST_mod_i.METH_write(DEF_x__h339);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operands_f_ETC___d103)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h2641);
    if (DEF_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operands_f_ETC___d103)
      dollar_display(sim_hdl,
		     this,
		     "s,-8,-8,-16",
		     &__str_literal_2,
		     DEF_signed_tb_operands_fifo_first__8_BITS_15_TO_8_7___d104,
		     DEF_signed_tb_operands_fifo_first__8_BITS_7_TO_0_05___d106,
		     DEF_signed_mod_tp_CONCAT_mod_prod_4_7___d107);
    if (DEF_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operands_f_ETC___d103)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,16",
		     &__str_literal_3,
		     DEF_a__h1682,
		     DEF_b__h1683,
		     DEF_v__h1707);
    if (DEF_NOT_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operan_ETC___d108)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_4, DEF_x__h2641);
    if (DEF_NOT_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operan_ETC___d108)
      dollar_display(sim_hdl,
		     this,
		     "s,-8,-8,-16,-16",
		     &__str_literal_5,
		     DEF_signed_tb_operands_fifo_first__8_BITS_15_TO_8_7___d104,
		     DEF_signed_tb_operands_fifo_first__8_BITS_7_TO_0_05___d106,
		     DEF_signed_mod_tp_CONCAT_mod_prod_4_7___d107,
		     DEF_signed_IF_tb_operands_fifo_first__8_BIT_7_9_T_ETC___d109);
    if (DEF_NOT_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operan_ETC___d108)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,16,16",
		     &__str_literal_6,
		     DEF_a__h1682,
		     DEF_b__h1683,
		     DEF_v__h1707,
		     DEF_expected__h1748);
    if (DEF_NOT_mod_tp_CONCAT_mod_prod_4_7_EQ_IF_tb_operan_ETC___d108)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_read_count.METH_write(DEF_x__h2517);
}

void MOD_mkTbEx5::RL_tb_monitor_test()
{
  tUInt32 DEF_x__h2870;
  tUInt8 DEF_tb_cycle_11_EQ_0___d112;
  tUInt8 DEF_tb_cycle_11_EQ_16384___d113;
  tUInt32 DEF_x__h2874;
  DEF_x__h2641 = INST_tb_read_count.METH_read();
  DEF_x__h2874 = INST_tb_cycle.METH_read();
  DEF_tb_cycle_11_EQ_16384___d113 = DEF_x__h2874 == 16384u;
  DEF_tb_cycle_11_EQ_0___d112 = DEF_x__h2874 == 0u;
  DEF_tb_read_count_1_EQ_128___d52 = DEF_x__h2641 == 128u;
  DEF_x__h2870 = DEF_x__h2874 + 1u;
  if (DEF_tb_cycle_11_EQ_0___d112)
    INST_tb_randomA_initialized.METH_write((tUInt8)1u);
  if (DEF_tb_cycle_11_EQ_0___d112)
    INST_tb_randomB_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_tb_read_count_1_EQ_128___d52)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_7, DEF_x__h2641, DEF_x__h2874);
    if (DEF_tb_read_count_1_EQ_128___d52)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_tb_cycle_11_EQ_16384___d113)
      dollar_display(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_tb_cycle_11_EQ_16384___d113)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_cycle.METH_write(DEF_x__h2870);
}


/* Methods */


/* Reset routines */

void MOD_mkTbEx5::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_tb_read_count.reset_RST(ARG_rst_in);
  INST_tb_randomB_initialized.reset_RST(ARG_rst_in);
  INST_tb_randomA_initialized.reset_RST(ARG_rst_in);
  INST_tb_operands_fifo.reset_RST(ARG_rst_in);
  INST_tb_feed_count.reset_RST(ARG_rst_in);
  INST_tb_cycle.reset_RST(ARG_rst_in);
  INST_mod_i.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbEx5::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbEx5::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_mod_a.dump_state(indent + 2u);
  INST_mod_b.dump_state(indent + 2u);
  INST_mod_i.dump_state(indent + 2u);
  INST_mod_prod.dump_state(indent + 2u);
  INST_mod_tp.dump_state(indent + 2u);
  INST_tb_cycle.dump_state(indent + 2u);
  INST_tb_feed_count.dump_state(indent + 2u);
  INST_tb_operands_fifo.dump_state(indent + 2u);
  INST_tb_randomA_ignore.dump_state(indent + 2u);
  INST_tb_randomA_initialized.dump_state(indent + 2u);
  INST_tb_randomA_zaz.dump_state(indent + 2u);
  INST_tb_randomB_ignore.dump_state(indent + 2u);
  INST_tb_randomB_initialized.dump_state(indent + 2u);
  INST_tb_randomB_zaz.dump_state(indent + 2u);
  INST_tb_read_count.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbEx5::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 47u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mod_mulStep", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mod_mulStep", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h98", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i__h225", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_read_count_1_EQ_128___d52", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1188", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1261", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h811", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h885", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1662", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h246", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2641", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h339", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1131", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h754", 8u);
  num = INST_mod_a.dump_VCD_defs(num);
  num = INST_mod_b.dump_VCD_defs(num);
  num = INST_mod_i.dump_VCD_defs(num);
  num = INST_mod_prod.dump_VCD_defs(num);
  num = INST_mod_tp.dump_VCD_defs(num);
  num = INST_tb_cycle.dump_VCD_defs(num);
  num = INST_tb_feed_count.dump_VCD_defs(num);
  num = INST_tb_operands_fifo.dump_VCD_defs(num);
  num = INST_tb_randomA_ignore.dump_VCD_defs(num);
  num = INST_tb_randomA_initialized.dump_VCD_defs(num);
  num = INST_tb_randomA_zaz.dump_VCD_defs(num);
  num = INST_tb_randomB_ignore.dump_VCD_defs(num);
  num = INST_tb_randomB_initialized.dump_VCD_defs(num);
  num = INST_tb_randomB_zaz.dump_VCD_defs(num);
  num = INST_tb_read_count.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbEx5::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbEx5 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbEx5::vcd_defs(tVCDDumpType dt, MOD_mkTbEx5 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_mod_mulStep) != DEF_CAN_FIRE_RL_mod_mulStep)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mod_mulStep, 1u);
	backing.DEF_CAN_FIRE_RL_mod_mulStep = DEF_CAN_FIRE_RL_mod_mulStep;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_feed) != DEF_CAN_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_feed, 1u);
	backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_monitor_test) != DEF_CAN_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every) != DEF_CAN_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every_1) != DEF_CAN_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every) != DEF_CAN_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every_1) != DEF_CAN_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_read) != DEF_CAN_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_read, 1u);
	backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32) != DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32, 1u);
	backing.DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32 = DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33) != DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33, 1u);
	backing.DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33 = DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mod_mulStep) != DEF_WILL_FIRE_RL_mod_mulStep)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mod_mulStep, 1u);
	backing.DEF_WILL_FIRE_RL_mod_mulStep = DEF_WILL_FIRE_RL_mod_mulStep;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_feed) != DEF_WILL_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_feed, 1u);
	backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_monitor_test) != DEF_WILL_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every) != DEF_WILL_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every_1) != DEF_WILL_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every) != DEF_WILL_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every_1) != DEF_WILL_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_read) != DEF_WILL_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_read, 1u);
	backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF__read__h98) != DEF__read__h98)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h98, 8u);
	backing.DEF__read__h98 = DEF__read__h98;
      }
      ++num;
      if ((backing.DEF_i__h225) != DEF_i__h225)
      {
	vcd_write_val(sim_hdl, num, DEF_i__h225, 4u);
	backing.DEF_i__h225 = DEF_i__h225;
      }
      ++num;
      if ((backing.DEF_tb_read_count_1_EQ_128___d52) != DEF_tb_read_count_1_EQ_128___d52)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_read_count_1_EQ_128___d52, 1u);
	backing.DEF_tb_read_count_1_EQ_128___d52 = DEF_tb_read_count_1_EQ_128___d52;
      }
      ++num;
      if ((backing.DEF_v__h1188) != DEF_v__h1188)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1188, 32u);
	backing.DEF_v__h1188 = DEF_v__h1188;
      }
      ++num;
      if ((backing.DEF_v__h1261) != DEF_v__h1261)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1261, 8u);
	backing.DEF_v__h1261 = DEF_v__h1261;
      }
      ++num;
      if ((backing.DEF_v__h811) != DEF_v__h811)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h811, 32u);
	backing.DEF_v__h811 = DEF_v__h811;
      }
      ++num;
      if ((backing.DEF_v__h885) != DEF_v__h885)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h885, 8u);
	backing.DEF_v__h885 = DEF_v__h885;
      }
      ++num;
      if ((backing.DEF_x__h1662) != DEF_x__h1662)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1662, 32u);
	backing.DEF_x__h1662 = DEF_x__h1662;
      }
      ++num;
      if ((backing.DEF_x__h246) != DEF_x__h246)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h246, 8u);
	backing.DEF_x__h246 = DEF_x__h246;
      }
      ++num;
      if ((backing.DEF_x__h2641) != DEF_x__h2641)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2641, 32u);
	backing.DEF_x__h2641 = DEF_x__h2641;
      }
      ++num;
      if ((backing.DEF_x__h339) != DEF_x__h339)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h339, 4u);
	backing.DEF_x__h339 = DEF_x__h339;
      }
      ++num;
      if ((backing.DEF_x_wget__h1131) != DEF_x_wget__h1131)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1131, 8u);
	backing.DEF_x_wget__h1131 = DEF_x_wget__h1131;
      }
      ++num;
      if ((backing.DEF_x_wget__h754) != DEF_x_wget__h754)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h754, 8u);
	backing.DEF_x_wget__h754 = DEF_x_wget__h754;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mod_mulStep, 1u);
      backing.DEF_CAN_FIRE_RL_mod_mulStep = DEF_CAN_FIRE_RL_mod_mulStep;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_feed, 1u);
      backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_read, 1u);
      backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32, 1u);
      backing.DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32 = DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d32;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33, 1u);
      backing.DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33 = DEF_IF_tb_randomB_zaz_whas__9_THEN_tb_randomB_zaz__ETC___d33;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mod_mulStep, 1u);
      backing.DEF_WILL_FIRE_RL_mod_mulStep = DEF_WILL_FIRE_RL_mod_mulStep;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_feed, 1u);
      backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_read, 1u);
      backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF__read__h98, 8u);
      backing.DEF__read__h98 = DEF__read__h98;
      vcd_write_val(sim_hdl, num++, DEF_i__h225, 4u);
      backing.DEF_i__h225 = DEF_i__h225;
      vcd_write_val(sim_hdl, num++, DEF_tb_read_count_1_EQ_128___d52, 1u);
      backing.DEF_tb_read_count_1_EQ_128___d52 = DEF_tb_read_count_1_EQ_128___d52;
      vcd_write_val(sim_hdl, num++, DEF_v__h1188, 32u);
      backing.DEF_v__h1188 = DEF_v__h1188;
      vcd_write_val(sim_hdl, num++, DEF_v__h1261, 8u);
      backing.DEF_v__h1261 = DEF_v__h1261;
      vcd_write_val(sim_hdl, num++, DEF_v__h811, 32u);
      backing.DEF_v__h811 = DEF_v__h811;
      vcd_write_val(sim_hdl, num++, DEF_v__h885, 8u);
      backing.DEF_v__h885 = DEF_v__h885;
      vcd_write_val(sim_hdl, num++, DEF_x__h1662, 32u);
      backing.DEF_x__h1662 = DEF_x__h1662;
      vcd_write_val(sim_hdl, num++, DEF_x__h246, 8u);
      backing.DEF_x__h246 = DEF_x__h246;
      vcd_write_val(sim_hdl, num++, DEF_x__h2641, 32u);
      backing.DEF_x__h2641 = DEF_x__h2641;
      vcd_write_val(sim_hdl, num++, DEF_x__h339, 4u);
      backing.DEF_x__h339 = DEF_x__h339;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1131, 8u);
      backing.DEF_x_wget__h1131 = DEF_x_wget__h1131;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h754, 8u);
      backing.DEF_x_wget__h754 = DEF_x_wget__h754;
    }
}

void MOD_mkTbEx5::vcd_prims(tVCDDumpType dt, MOD_mkTbEx5 &backing)
{
  INST_mod_a.dump_VCD(dt, backing.INST_mod_a);
  INST_mod_b.dump_VCD(dt, backing.INST_mod_b);
  INST_mod_i.dump_VCD(dt, backing.INST_mod_i);
  INST_mod_prod.dump_VCD(dt, backing.INST_mod_prod);
  INST_mod_tp.dump_VCD(dt, backing.INST_mod_tp);
  INST_tb_cycle.dump_VCD(dt, backing.INST_tb_cycle);
  INST_tb_feed_count.dump_VCD(dt, backing.INST_tb_feed_count);
  INST_tb_operands_fifo.dump_VCD(dt, backing.INST_tb_operands_fifo);
  INST_tb_randomA_ignore.dump_VCD(dt, backing.INST_tb_randomA_ignore);
  INST_tb_randomA_initialized.dump_VCD(dt, backing.INST_tb_randomA_initialized);
  INST_tb_randomA_zaz.dump_VCD(dt, backing.INST_tb_randomA_zaz);
  INST_tb_randomB_ignore.dump_VCD(dt, backing.INST_tb_randomB_ignore);
  INST_tb_randomB_initialized.dump_VCD(dt, backing.INST_tb_randomB_initialized);
  INST_tb_randomB_zaz.dump_VCD(dt, backing.INST_tb_randomB_zaz);
  INST_tb_read_count.dump_VCD(dt, backing.INST_tb_read_count);
}
