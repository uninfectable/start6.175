/*
 * Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
 * 
 * On Sun Sep 10 13:14:01 UTC 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbEx9b.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("    if signed: %0d * %0d DUT gave %0d", 37u);
static std::string const __str_literal_5("    if signed: %0d * %0d DUT gave %0d instead of %0d",
					 52u);
static std::string const __str_literal_3("    if unsigned: %0d * %0d DUT gave %0d", 39u);
static std::string const __str_literal_6("    if unsigned: %0d * %0d DUT gave %0d instead of %0d",
					 54u);
static std::string const __str_literal_4("FAILED case %0d", 15u);
static std::string const __str_literal_8("FAILED due to cycle limit", 25u);
static std::string const __str_literal_7("PASSED %0d test cases in %0d cycles", 35u);
static std::string const __str_literal_1("PASSED case %0d", 15u);


/* Constructor */
MOD_mkTbEx9b::MOD_mkTbEx9b(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_mod_i(simHdl, "mod_i", this, 6u, (tUInt8)17u, (tUInt8)0u),
    INST_mod_m_neg(simHdl, "mod_m_neg", this, 66u),
    INST_mod_m_pos(simHdl, "mod_m_pos", this, 66u),
    INST_mod_p(simHdl, "mod_p", this, 66u),
    INST_tb_cycle(simHdl, "tb_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_tb_feed_count(simHdl, "tb_feed_count", this, 32u, 0u, (tUInt8)0u),
    INST_tb_operands_fifo(simHdl, "tb_operands_fifo", this, 64u, 4u, (tUInt8)1u, 0u),
    INST_tb_randomA_ignore(simHdl, "tb_randomA_ignore", this, 32u, (tUInt8)0u),
    INST_tb_randomA_initialized(simHdl, "tb_randomA_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomA_zaz(simHdl, "tb_randomA_zaz", this, 32u, (tUInt8)0u),
    INST_tb_randomB_ignore(simHdl, "tb_randomB_ignore", this, 32u, (tUInt8)0u),
    INST_tb_randomB_initialized(simHdl, "tb_randomB_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomB_zaz(simHdl, "tb_randomB_zaz", this, 32u, (tUInt8)0u),
    INST_tb_read_count(simHdl, "tb_read_count", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_y__h304(66u),
    DEF_y__h537(66u),
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31(66u),
    DEF_x__h263(66u),
    DEF_x__h349(66u),
    DEF_x__h511(66u),
    DEF_x__h560(66u),
    DEF_x__h427(66u),
    DEF_a__h530(66u),
    DEF_a__h446(66u),
    DEF_a__h282(66u),
    DEF_a__h368(66u),
    DEF_y__h453(66u),
    DEF_y__h375(66u),
    DEF_new_value__h1594(2863311530u),
    DEF_new_value__h1180(2863311530u),
    DEF_mod_p__h2656(66u),
    DEF_mod_m_neg_BITS_64_TO_0___h463(65u),
    DEF_mod_m_pos_BITS_64_TO_0___h384(65u),
    DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84(128u),
    DEF_x__h1891(66u),
    DEF_x__h1924(66u),
    DEF_x__h2217(66u)
{
  symbol_count = 45u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbEx9b::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_mod_mul_step", SYM_DEF, &DEF_CAN_FIRE_RL_mod_mul_step, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_tb_feed", SYM_DEF, &DEF_CAN_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_tb_read", SYM_DEF, &DEF_CAN_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[8u], "mod_i", SYM_MODULE, &INST_mod_i);
  init_symbol(&symbols[9u], "mod_m_neg", SYM_MODULE, &INST_mod_m_neg);
  init_symbol(&symbols[10u], "mod_m_pos", SYM_MODULE, &INST_mod_m_pos);
  init_symbol(&symbols[11u], "mod_p", SYM_MODULE, &INST_mod_p);
  init_symbol(&symbols[12u], "RL_mod_mul_step", SYM_RULE);
  init_symbol(&symbols[13u], "RL_tb_feed", SYM_RULE);
  init_symbol(&symbols[14u], "RL_tb_monitor_test", SYM_RULE);
  init_symbol(&symbols[15u], "RL_tb_randomA_every", SYM_RULE);
  init_symbol(&symbols[16u], "RL_tb_randomA_every_1", SYM_RULE);
  init_symbol(&symbols[17u], "RL_tb_randomB_every", SYM_RULE);
  init_symbol(&symbols[18u], "RL_tb_randomB_every_1", SYM_RULE);
  init_symbol(&symbols[19u], "RL_tb_read", SYM_RULE);
  init_symbol(&symbols[20u], "tb_cycle", SYM_MODULE, &INST_tb_cycle);
  init_symbol(&symbols[21u], "tb_feed_count", SYM_MODULE, &INST_tb_feed_count);
  init_symbol(&symbols[22u], "tb_operands_fifo", SYM_MODULE, &INST_tb_operands_fifo);
  init_symbol(&symbols[23u], "tb_randomA_ignore", SYM_MODULE, &INST_tb_randomA_ignore);
  init_symbol(&symbols[24u], "tb_randomA_initialized", SYM_MODULE, &INST_tb_randomA_initialized);
  init_symbol(&symbols[25u], "tb_randomA_zaz", SYM_MODULE, &INST_tb_randomA_zaz);
  init_symbol(&symbols[26u], "tb_randomB_ignore", SYM_MODULE, &INST_tb_randomB_ignore);
  init_symbol(&symbols[27u], "tb_randomB_initialized", SYM_MODULE, &INST_tb_randomB_initialized);
  init_symbol(&symbols[28u], "tb_randomB_zaz", SYM_MODULE, &INST_tb_randomB_zaz);
  init_symbol(&symbols[29u], "tb_read_count", SYM_MODULE, &INST_tb_read_count);
  init_symbol(&symbols[30u], "v__h1212", SYM_DEF, &DEF_v__h1212, 32u);
  init_symbol(&symbols[31u], "v__h1625", SYM_DEF, &DEF_v__h1625, 32u);
  init_symbol(&symbols[32u],
	      "WILL_FIRE_RL_mod_mul_step",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mod_mul_step,
	      1u);
  init_symbol(&symbols[33u], "WILL_FIRE_RL_tb_feed", SYM_DEF, &DEF_WILL_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[34u],
	      "WILL_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[39u], "WILL_FIRE_RL_tb_read", SYM_DEF, &DEF_WILL_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[40u], "x__h2549", SYM_DEF, &DEF_x__h2549, 32u);
  init_symbol(&symbols[41u], "x__h3110", SYM_DEF, &DEF_x__h3110, 32u);
  init_symbol(&symbols[42u], "x__h630", SYM_DEF, &DEF_x__h630, 6u);
  init_symbol(&symbols[43u], "x_wget__h1044", SYM_DEF, &DEF_x_wget__h1044, 32u);
  init_symbol(&symbols[44u], "x_wget__h1458", SYM_DEF, &DEF_x_wget__h1458, 32u);
}


/* Rule actions */

void MOD_mkTbEx9b::RL_mod_mul_step()
{
  tUInt8 DEF_pr__h174;
  DEF_y__h304 = INST_mod_m_pos.METH_read();
  DEF_y__h537 = INST_mod_m_neg.METH_read();
  DEF_x__h630 = INST_mod_i.METH_read();
  DEF_x__h626 = (tUInt8)63u & (DEF_x__h630 + (tUInt8)1u);
  DEF_mod_p__h2656 = INST_mod_p.METH_read();
  DEF_pr__h174 = DEF_mod_p__h2656.get_bits_in_word8(0u, 0u, 3u);
  wop_primShiftRAWide(66u, 66u, DEF_mod_p__h2656, 32u, 2u, DEF_x__h560);
  wop_add(DEF_mod_p__h2656, DEF_y__h537, DEF_a__h530);
  wop_primShiftRAWide(66u, 66u, DEF_a__h530, 32u, 2u, DEF_x__h511);
  wop_add(DEF_mod_p__h2656, DEF_y__h304, DEF_a__h282);
  wop_primShiftRAWide(66u, 66u, DEF_a__h282, 32u, 2u, DEF_x__h263);
  wop_primExtractWide(65u, 66u, DEF_y__h537, 32u, 64u, 32u, 0u, DEF_mod_m_neg_BITS_64_TO_0___h463);
  DEF_y__h453.set_bits_in_word(primExtract8(2u,
					    65u,
					    DEF_mod_m_neg_BITS_64_TO_0___h463,
					    32u,
					    64u,
					    32u,
					    63u),
			       2u,
			       0u,
			       2u).set_whole_word(primExtract32(32u,
								65u,
								DEF_mod_m_neg_BITS_64_TO_0___h463,
								32u,
								62u,
								32u,
								31u),
						  1u).set_whole_word((DEF_mod_m_neg_BITS_64_TO_0___h463.get_bits_in_word32(0u,
															   0u,
															   31u) << 1u) | (tUInt32)((tUInt8)0u),
								     0u);
  wop_add(DEF_mod_p__h2656, DEF_y__h453, DEF_a__h446);
  wop_primShiftRAWide(66u, 66u, DEF_a__h446, 32u, 2u, DEF_x__h427);
  wop_primExtractWide(65u, 66u, DEF_y__h304, 32u, 64u, 32u, 0u, DEF_mod_m_pos_BITS_64_TO_0___h384);
  DEF_y__h375.set_bits_in_word(primExtract8(2u,
					    65u,
					    DEF_mod_m_pos_BITS_64_TO_0___h384,
					    32u,
					    64u,
					    32u,
					    63u),
			       2u,
			       0u,
			       2u).set_whole_word(primExtract32(32u,
								65u,
								DEF_mod_m_pos_BITS_64_TO_0___h384,
								32u,
								62u,
								32u,
								31u),
						  1u).set_whole_word((DEF_mod_m_pos_BITS_64_TO_0___h384.get_bits_in_word32(0u,
															   0u,
															   31u) << 1u) | (tUInt32)((tUInt8)0u),
								     0u);
  wop_add(DEF_mod_p__h2656, DEF_y__h375, DEF_a__h368);
  wop_primShiftRAWide(66u, 66u, DEF_a__h368, 32u, 2u, DEF_x__h349);
  switch (DEF_pr__h174) {
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h263;
    break;
  case (tUInt8)3u:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h349;
    break;
  case (tUInt8)4u:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h427;
    break;
  case (tUInt8)5u:
  case (tUInt8)6u:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h511;
    break;
  default:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h560;
  }
  INST_mod_p.METH_write(DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31);
  INST_mod_i.METH_write(DEF_x__h626);
}

void MOD_mkTbEx9b::RL_tb_randomA_every()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    rand32();
    DEF_new_value__h1180 = rand32();
  }
  INST_tb_randomA_zaz.METH_wset(DEF_new_value__h1180);
}

void MOD_mkTbEx9b::RL_tb_randomA_every_1()
{
  DEF_x_wget__h1044 = INST_tb_randomA_zaz.METH_wget();
  DEF_tb_randomA_zaz_whas____d36 = INST_tb_randomA_zaz.METH_whas();
  DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38 = DEF_x_wget__h1044;
  DEF_v__h1212 = DEF_tb_randomA_zaz_whas____d36 ? DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38 : 0u;
  INST_tb_randomA_ignore.METH_wset(DEF_v__h1212);
}

void MOD_mkTbEx9b::RL_tb_randomB_every()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    rand32();
    DEF_new_value__h1594 = rand32();
  }
  INST_tb_randomB_zaz.METH_wset(DEF_new_value__h1594);
}

void MOD_mkTbEx9b::RL_tb_randomB_every_1()
{
  DEF_x_wget__h1458 = INST_tb_randomB_zaz.METH_wget();
  DEF_v__h1625 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1458 : 0u;
  INST_tb_randomB_ignore.METH_wset(DEF_v__h1625);
}

void MOD_mkTbEx9b::RL_tb_feed()
{
  tUInt64 DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d62;
  tUInt32 DEF_x__h2530;
  tUInt8 DEF_NOT_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_rando_ETC___d61;
  tUInt8 DEF__1__h2177;
  tUInt32 DEF_IF_tb_randomA_zaz_whas__6_THEN_NEG_IF_tb_rando_ETC___d67;
  tUInt8 DEF__1__h2461;
  DEF_x_wget__h1044 = INST_tb_randomA_zaz.METH_wget();
  DEF_x__h2549 = INST_tb_feed_count.METH_read();
  DEF_x_wget__h1458 = INST_tb_randomB_zaz.METH_wget();
  DEF_tb_randomA_zaz_whas____d36 = INST_tb_randomA_zaz.METH_whas();
  DEF_v__h1625 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1458 : 0u;
  DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38 = DEF_x_wget__h1044;
  DEF_IF_tb_randomA_zaz_whas__6_THEN_NEG_IF_tb_rando_ETC___d67 = DEF_tb_randomA_zaz_whas____d36 ? -DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38 : 0u;
  DEF__1__h2461 = (tUInt8)(DEF_IF_tb_randomA_zaz_whas__6_THEN_NEG_IF_tb_rando_ETC___d67 >> 31u);
  DEF_v__h1212 = DEF_tb_randomA_zaz_whas____d36 ? DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38 : 0u;
  DEF__1__h2177 = (tUInt8)(DEF_v__h1212 >> 31u);
  DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46 = DEF_v__h1212 == 2147483648u;
  DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47 = DEF_v__h1625 == 2147483648u;
  DEF_NOT_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_rando_ETC___d61 = !DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46 && !DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47;
  DEF_x__h2530 = DEF_x__h2549 + 1u;
  DEF_x__h1891.set_bits_in_word((tUInt8)(0llu),
				2u,
				0u,
				2u).set_whole_word((((tUInt32)(2147483647u & 0llu)) << 1u) | (tUInt32)((tUInt8)(DEF_v__h1625 >> 31u)),
						   1u).set_whole_word((((tUInt32)(2147483647u & DEF_v__h1625)) << 1u) | (tUInt32)((tUInt8)0u),
								      0u);
  DEF_x__h1924.set_bits_in_word((tUInt8)3u & ((DEF__1__h2177 << 1u) | (tUInt8)(DEF_v__h1212 >> 31u)),
				2u,
				0u,
				2u).set_whole_word((((tUInt32)(2147483647u & DEF_v__h1212)) << 1u) | (tUInt32)((tUInt8)(0llu)),
						   1u).set_whole_word((tUInt32)(0llu), 0u);
  DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d62 = (((tUInt64)(DEF_v__h1212)) << 32u) | (tUInt64)(DEF_v__h1625);
  DEF_x__h2217.set_bits_in_word((tUInt8)3u & ((DEF__1__h2461 << 1u) | (tUInt8)(DEF_IF_tb_randomA_zaz_whas__6_THEN_NEG_IF_tb_rando_ETC___d67 >> 31u)),
				2u,
				0u,
				2u).set_whole_word((((tUInt32)(2147483647u & DEF_IF_tb_randomA_zaz_whas__6_THEN_NEG_IF_tb_rando_ETC___d67)) << 1u) | (tUInt32)((tUInt8)(0llu)),
						   1u).set_whole_word((tUInt32)(0llu), 0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_rando_ETC___d61)
    INST_tb_operands_fifo.METH_enq(DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d62);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_rando_ETC___d61)
    INST_mod_p.METH_write(DEF_x__h1891);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_rando_ETC___d61)
    INST_mod_m_pos.METH_write(DEF_x__h1924);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_rando_ETC___d61)
    INST_mod_m_neg.METH_write(DEF_x__h2217);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_rando_ETC___d61)
    INST_mod_i.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_rando_ETC___d61)
    INST_tb_feed_count.METH_write(DEF_x__h2530);
}

void MOD_mkTbEx9b::RL_tb_read()
{
  tUInt32 DEF_x__h2986;
  tUInt8 DEF_NOT_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_f_ETC___d90;
  tUInt64 DEF_tb_operands_fifo_first____d79;
  tUInt32 DEF_b__h2574;
  tUInt32 DEF_signed_tb_operands_fifo_first__9_BITS_31_TO_0_2___d88;
  tUInt32 DEF_a__h2573;
  tUInt32 DEF_signed_tb_operands_fifo_first__9_BITS_63_TO_32_0___d87;
  tUInt64 DEF_v__h2598;
  tUInt64 DEF_signed_mod_p_BITS_64_TO_1_8___d89;
  tUInt64 DEF_expected__h2661;
  tUInt64 DEF_signed_SEXT_tb_operands_fifo_first__9_BITS_63_ETC___d91;
  tUInt8 DEF_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_fifo__ETC___d86;
  DEF_x__h630 = INST_mod_i.METH_read();
  DEF_x__h626 = (tUInt8)63u & (DEF_x__h630 + (tUInt8)1u);
  DEF_mod_p__h2656 = INST_mod_p.METH_read();
  DEF_v__h2598 = primExtract64(64u, 66u, DEF_mod_p__h2656, 32u, 64u, 32u, 1u);
  DEF_signed_mod_p_BITS_64_TO_1_8___d89 = DEF_v__h2598;
  DEF_tb_operands_fifo_first____d79 = INST_tb_operands_fifo.METH_first();
  DEF_a__h2573 = (tUInt32)(DEF_tb_operands_fifo_first____d79 >> 32u);
  DEF_signed_tb_operands_fifo_first__9_BITS_63_TO_32_0___d87 = DEF_a__h2573;
  DEF_b__h2574 = (tUInt32)(DEF_tb_operands_fifo_first____d79);
  DEF_signed_tb_operands_fifo_first__9_BITS_31_TO_0_2___d88 = DEF_b__h2574;
  DEF_x__h3110 = INST_tb_read_count.METH_read();
  wop_mul(WideData(64u, primSignExt64(64u, 32u, (tUInt32)(DEF_a__h2573))),
	  WideData(64u, primSignExt64(64u, 32u, (tUInt32)(DEF_b__h2574))),
	  DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84);
  DEF_expected__h2661 = primExtract64(64u,
				      128u,
				      DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84,
				      32u,
				      63u,
				      32u,
				      0u);
  DEF_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_fifo__ETC___d86 = DEF_v__h2598 == DEF_expected__h2661;
  DEF_signed_SEXT_tb_operands_fifo_first__9_BITS_63_ETC___d91 = DEF_expected__h2661;
  DEF_NOT_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_f_ETC___d90 = !DEF_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_fifo__ETC___d86;
  DEF_x__h2986 = DEF_x__h3110 + 1u;
  INST_tb_operands_fifo.METH_deq();
  INST_mod_i.METH_write(DEF_x__h626);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_fifo__ETC___d86)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h3110);
    if (DEF_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_fifo__ETC___d86)
      dollar_display(sim_hdl,
		     this,
		     "s,-32,-32,-64",
		     &__str_literal_2,
		     DEF_signed_tb_operands_fifo_first__9_BITS_63_TO_32_0___d87,
		     DEF_signed_tb_operands_fifo_first__9_BITS_31_TO_0_2___d88,
		     DEF_signed_mod_p_BITS_64_TO_1_8___d89);
    if (DEF_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_fifo__ETC___d86)
      dollar_display(sim_hdl,
		     this,
		     "s,32,32,64",
		     &__str_literal_3,
		     DEF_a__h2573,
		     DEF_b__h2574,
		     DEF_v__h2598);
    if (DEF_NOT_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_f_ETC___d90)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_4, DEF_x__h3110);
    if (DEF_NOT_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_f_ETC___d90)
      dollar_display(sim_hdl,
		     this,
		     "s,-32,-32,-64,-64",
		     &__str_literal_5,
		     DEF_signed_tb_operands_fifo_first__9_BITS_63_TO_32_0___d87,
		     DEF_signed_tb_operands_fifo_first__9_BITS_31_TO_0_2___d88,
		     DEF_signed_mod_p_BITS_64_TO_1_8___d89,
		     DEF_signed_SEXT_tb_operands_fifo_first__9_BITS_63_ETC___d91);
    if (DEF_NOT_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_f_ETC___d90)
      dollar_display(sim_hdl,
		     this,
		     "s,32,32,64,64",
		     &__str_literal_6,
		     DEF_a__h2573,
		     DEF_b__h2574,
		     DEF_v__h2598,
		     DEF_expected__h2661);
    if (DEF_NOT_mod_p_BITS_64_TO_1_8_EQ_SEXT_tb_operands_f_ETC___d90)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_read_count.METH_write(DEF_x__h2986);
}

void MOD_mkTbEx9b::RL_tb_monitor_test()
{
  tUInt32 DEF_x__h3339;
  tUInt8 DEF_tb_cycle_3_EQ_0___d94;
  tUInt8 DEF_tb_cycle_3_EQ_16384___d95;
  tUInt32 DEF_x__h3343;
  DEF_x__h3110 = INST_tb_read_count.METH_read();
  DEF_x__h3343 = INST_tb_cycle.METH_read();
  DEF_tb_cycle_3_EQ_16384___d95 = DEF_x__h3343 == 16384u;
  DEF_tb_cycle_3_EQ_0___d94 = DEF_x__h3343 == 0u;
  DEF_tb_read_count_2_EQ_128___d73 = DEF_x__h3110 == 128u;
  DEF_x__h3339 = DEF_x__h3343 + 1u;
  if (DEF_tb_cycle_3_EQ_0___d94)
    INST_tb_randomA_initialized.METH_write((tUInt8)1u);
  if (DEF_tb_cycle_3_EQ_0___d94)
    INST_tb_randomB_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_tb_read_count_2_EQ_128___d73)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_7, DEF_x__h3110, DEF_x__h3343);
    if (DEF_tb_read_count_2_EQ_128___d73)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_tb_cycle_3_EQ_16384___d95)
      dollar_display(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_tb_cycle_3_EQ_16384___d95)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_cycle.METH_write(DEF_x__h3339);
}


/* Methods */


/* Reset routines */

void MOD_mkTbEx9b::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_tb_read_count.reset_RST(ARG_rst_in);
  INST_tb_randomB_initialized.reset_RST(ARG_rst_in);
  INST_tb_randomA_initialized.reset_RST(ARG_rst_in);
  INST_tb_operands_fifo.reset_RST(ARG_rst_in);
  INST_tb_feed_count.reset_RST(ARG_rst_in);
  INST_tb_cycle.reset_RST(ARG_rst_in);
  INST_mod_i.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbEx9b::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbEx9b::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_mod_i.dump_state(indent + 2u);
  INST_mod_m_neg.dump_state(indent + 2u);
  INST_mod_m_pos.dump_state(indent + 2u);
  INST_mod_p.dump_state(indent + 2u);
  INST_tb_cycle.dump_state(indent + 2u);
  INST_tb_feed_count.dump_state(indent + 2u);
  INST_tb_operands_fifo.dump_state(indent + 2u);
  INST_tb_randomA_ignore.dump_state(indent + 2u);
  INST_tb_randomA_initialized.dump_state(indent + 2u);
  INST_tb_randomA_zaz.dump_state(indent + 2u);
  INST_tb_randomB_ignore.dump_state(indent + 2u);
  INST_tb_randomB_initialized.dump_state(indent + 2u);
  INST_tb_randomB_zaz.dump_state(indent + 2u);
  INST_tb_read_count.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbEx9b::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 67u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mod_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mod_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a__h282", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a__h368", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a__h446", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a__h530", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_m_neg_BITS_64_TO_0___h463", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_m_pos_BITS_64_TO_0___h384", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_p__h2656", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "new_value__h1180", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "new_value__h1594", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_randomA_zaz_whas____d36", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_read_count_2_EQ_128___d73", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1212", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1625", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1891", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1924", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2217", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2549", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h263", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h3110", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h349", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h427", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h511", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h560", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h626", 6u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h630", 6u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1044", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1458", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h304", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h375", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h453", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h537", 66u);
  num = INST_mod_i.dump_VCD_defs(num);
  num = INST_mod_m_neg.dump_VCD_defs(num);
  num = INST_mod_m_pos.dump_VCD_defs(num);
  num = INST_mod_p.dump_VCD_defs(num);
  num = INST_tb_cycle.dump_VCD_defs(num);
  num = INST_tb_feed_count.dump_VCD_defs(num);
  num = INST_tb_operands_fifo.dump_VCD_defs(num);
  num = INST_tb_randomA_ignore.dump_VCD_defs(num);
  num = INST_tb_randomA_initialized.dump_VCD_defs(num);
  num = INST_tb_randomA_zaz.dump_VCD_defs(num);
  num = INST_tb_randomB_ignore.dump_VCD_defs(num);
  num = INST_tb_randomB_initialized.dump_VCD_defs(num);
  num = INST_tb_randomB_zaz.dump_VCD_defs(num);
  num = INST_tb_read_count.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbEx9b::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbEx9b &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbEx9b::vcd_defs(tVCDDumpType dt, MOD_mkTbEx9b &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 6u);
    vcd_write_x(sim_hdl, num++, 6u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_mod_mul_step) != DEF_CAN_FIRE_RL_mod_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mod_mul_step, 1u);
	backing.DEF_CAN_FIRE_RL_mod_mul_step = DEF_CAN_FIRE_RL_mod_mul_step;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_feed) != DEF_CAN_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_feed, 1u);
	backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_monitor_test) != DEF_CAN_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every) != DEF_CAN_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every_1) != DEF_CAN_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every) != DEF_CAN_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every_1) != DEF_CAN_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_read) != DEF_CAN_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_read, 1u);
	backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31) != DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31, 66u);
	backing.DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46) != DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46, 1u);
	backing.DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46 = DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38) != DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38, 32u);
	backing.DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38 = DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47) != DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47, 1u);
	backing.DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47 = DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84) != DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84)
      {
	vcd_write_val(sim_hdl, num, DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84, 128u);
	backing.DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84 = DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mod_mul_step) != DEF_WILL_FIRE_RL_mod_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mod_mul_step, 1u);
	backing.DEF_WILL_FIRE_RL_mod_mul_step = DEF_WILL_FIRE_RL_mod_mul_step;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_feed) != DEF_WILL_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_feed, 1u);
	backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_monitor_test) != DEF_WILL_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every) != DEF_WILL_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every_1) != DEF_WILL_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every) != DEF_WILL_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every_1) != DEF_WILL_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_read) != DEF_WILL_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_read, 1u);
	backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_a__h282) != DEF_a__h282)
      {
	vcd_write_val(sim_hdl, num, DEF_a__h282, 66u);
	backing.DEF_a__h282 = DEF_a__h282;
      }
      ++num;
      if ((backing.DEF_a__h368) != DEF_a__h368)
      {
	vcd_write_val(sim_hdl, num, DEF_a__h368, 66u);
	backing.DEF_a__h368 = DEF_a__h368;
      }
      ++num;
      if ((backing.DEF_a__h446) != DEF_a__h446)
      {
	vcd_write_val(sim_hdl, num, DEF_a__h446, 66u);
	backing.DEF_a__h446 = DEF_a__h446;
      }
      ++num;
      if ((backing.DEF_a__h530) != DEF_a__h530)
      {
	vcd_write_val(sim_hdl, num, DEF_a__h530, 66u);
	backing.DEF_a__h530 = DEF_a__h530;
      }
      ++num;
      if ((backing.DEF_mod_m_neg_BITS_64_TO_0___h463) != DEF_mod_m_neg_BITS_64_TO_0___h463)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_m_neg_BITS_64_TO_0___h463, 65u);
	backing.DEF_mod_m_neg_BITS_64_TO_0___h463 = DEF_mod_m_neg_BITS_64_TO_0___h463;
      }
      ++num;
      if ((backing.DEF_mod_m_pos_BITS_64_TO_0___h384) != DEF_mod_m_pos_BITS_64_TO_0___h384)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_m_pos_BITS_64_TO_0___h384, 65u);
	backing.DEF_mod_m_pos_BITS_64_TO_0___h384 = DEF_mod_m_pos_BITS_64_TO_0___h384;
      }
      ++num;
      if ((backing.DEF_mod_p__h2656) != DEF_mod_p__h2656)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_p__h2656, 66u);
	backing.DEF_mod_p__h2656 = DEF_mod_p__h2656;
      }
      ++num;
      if ((backing.DEF_new_value__h1180) != DEF_new_value__h1180)
      {
	vcd_write_val(sim_hdl, num, DEF_new_value__h1180, 32u);
	backing.DEF_new_value__h1180 = DEF_new_value__h1180;
      }
      ++num;
      if ((backing.DEF_new_value__h1594) != DEF_new_value__h1594)
      {
	vcd_write_val(sim_hdl, num, DEF_new_value__h1594, 32u);
	backing.DEF_new_value__h1594 = DEF_new_value__h1594;
      }
      ++num;
      if ((backing.DEF_tb_randomA_zaz_whas____d36) != DEF_tb_randomA_zaz_whas____d36)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_randomA_zaz_whas____d36, 1u);
	backing.DEF_tb_randomA_zaz_whas____d36 = DEF_tb_randomA_zaz_whas____d36;
      }
      ++num;
      if ((backing.DEF_tb_read_count_2_EQ_128___d73) != DEF_tb_read_count_2_EQ_128___d73)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_read_count_2_EQ_128___d73, 1u);
	backing.DEF_tb_read_count_2_EQ_128___d73 = DEF_tb_read_count_2_EQ_128___d73;
      }
      ++num;
      if ((backing.DEF_v__h1212) != DEF_v__h1212)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1212, 32u);
	backing.DEF_v__h1212 = DEF_v__h1212;
      }
      ++num;
      if ((backing.DEF_v__h1625) != DEF_v__h1625)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1625, 32u);
	backing.DEF_v__h1625 = DEF_v__h1625;
      }
      ++num;
      if ((backing.DEF_x__h1891) != DEF_x__h1891)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1891, 66u);
	backing.DEF_x__h1891 = DEF_x__h1891;
      }
      ++num;
      if ((backing.DEF_x__h1924) != DEF_x__h1924)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1924, 66u);
	backing.DEF_x__h1924 = DEF_x__h1924;
      }
      ++num;
      if ((backing.DEF_x__h2217) != DEF_x__h2217)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2217, 66u);
	backing.DEF_x__h2217 = DEF_x__h2217;
      }
      ++num;
      if ((backing.DEF_x__h2549) != DEF_x__h2549)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2549, 32u);
	backing.DEF_x__h2549 = DEF_x__h2549;
      }
      ++num;
      if ((backing.DEF_x__h263) != DEF_x__h263)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h263, 66u);
	backing.DEF_x__h263 = DEF_x__h263;
      }
      ++num;
      if ((backing.DEF_x__h3110) != DEF_x__h3110)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h3110, 32u);
	backing.DEF_x__h3110 = DEF_x__h3110;
      }
      ++num;
      if ((backing.DEF_x__h349) != DEF_x__h349)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h349, 66u);
	backing.DEF_x__h349 = DEF_x__h349;
      }
      ++num;
      if ((backing.DEF_x__h427) != DEF_x__h427)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h427, 66u);
	backing.DEF_x__h427 = DEF_x__h427;
      }
      ++num;
      if ((backing.DEF_x__h511) != DEF_x__h511)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h511, 66u);
	backing.DEF_x__h511 = DEF_x__h511;
      }
      ++num;
      if ((backing.DEF_x__h560) != DEF_x__h560)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h560, 66u);
	backing.DEF_x__h560 = DEF_x__h560;
      }
      ++num;
      if ((backing.DEF_x__h626) != DEF_x__h626)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h626, 6u);
	backing.DEF_x__h626 = DEF_x__h626;
      }
      ++num;
      if ((backing.DEF_x__h630) != DEF_x__h630)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h630, 6u);
	backing.DEF_x__h630 = DEF_x__h630;
      }
      ++num;
      if ((backing.DEF_x_wget__h1044) != DEF_x_wget__h1044)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1044, 32u);
	backing.DEF_x_wget__h1044 = DEF_x_wget__h1044;
      }
      ++num;
      if ((backing.DEF_x_wget__h1458) != DEF_x_wget__h1458)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1458, 32u);
	backing.DEF_x_wget__h1458 = DEF_x_wget__h1458;
      }
      ++num;
      if ((backing.DEF_y__h304) != DEF_y__h304)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h304, 66u);
	backing.DEF_y__h304 = DEF_y__h304;
      }
      ++num;
      if ((backing.DEF_y__h375) != DEF_y__h375)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h375, 66u);
	backing.DEF_y__h375 = DEF_y__h375;
      }
      ++num;
      if ((backing.DEF_y__h453) != DEF_y__h453)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h453, 66u);
	backing.DEF_y__h453 = DEF_y__h453;
      }
      ++num;
      if ((backing.DEF_y__h537) != DEF_y__h537)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h537, 66u);
	backing.DEF_y__h537 = DEF_y__h537;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mod_mul_step, 1u);
      backing.DEF_CAN_FIRE_RL_mod_mul_step = DEF_CAN_FIRE_RL_mod_mul_step;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_feed, 1u);
      backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_read, 1u);
      backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31, 66u);
      backing.DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46, 1u);
      backing.DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46 = DEF_IF_tb_randomA_zaz_whas__6_THEN_IF_tb_randomA_z_ETC___d46;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38, 32u);
      backing.DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38 = DEF_IF_tb_randomA_zaz_whas__6_THEN_tb_randomA_zaz__ETC___d38;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47, 1u);
      backing.DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47 = DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84, 128u);
      backing.DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84 = DEF_SEXT_tb_operands_fifo_first__9_BITS_63_TO_32_0_ETC___d84;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mod_mul_step, 1u);
      backing.DEF_WILL_FIRE_RL_mod_mul_step = DEF_WILL_FIRE_RL_mod_mul_step;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_feed, 1u);
      backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_read, 1u);
      backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_a__h282, 66u);
      backing.DEF_a__h282 = DEF_a__h282;
      vcd_write_val(sim_hdl, num++, DEF_a__h368, 66u);
      backing.DEF_a__h368 = DEF_a__h368;
      vcd_write_val(sim_hdl, num++, DEF_a__h446, 66u);
      backing.DEF_a__h446 = DEF_a__h446;
      vcd_write_val(sim_hdl, num++, DEF_a__h530, 66u);
      backing.DEF_a__h530 = DEF_a__h530;
      vcd_write_val(sim_hdl, num++, DEF_mod_m_neg_BITS_64_TO_0___h463, 65u);
      backing.DEF_mod_m_neg_BITS_64_TO_0___h463 = DEF_mod_m_neg_BITS_64_TO_0___h463;
      vcd_write_val(sim_hdl, num++, DEF_mod_m_pos_BITS_64_TO_0___h384, 65u);
      backing.DEF_mod_m_pos_BITS_64_TO_0___h384 = DEF_mod_m_pos_BITS_64_TO_0___h384;
      vcd_write_val(sim_hdl, num++, DEF_mod_p__h2656, 66u);
      backing.DEF_mod_p__h2656 = DEF_mod_p__h2656;
      vcd_write_val(sim_hdl, num++, DEF_new_value__h1180, 32u);
      backing.DEF_new_value__h1180 = DEF_new_value__h1180;
      vcd_write_val(sim_hdl, num++, DEF_new_value__h1594, 32u);
      backing.DEF_new_value__h1594 = DEF_new_value__h1594;
      vcd_write_val(sim_hdl, num++, DEF_tb_randomA_zaz_whas____d36, 1u);
      backing.DEF_tb_randomA_zaz_whas____d36 = DEF_tb_randomA_zaz_whas____d36;
      vcd_write_val(sim_hdl, num++, DEF_tb_read_count_2_EQ_128___d73, 1u);
      backing.DEF_tb_read_count_2_EQ_128___d73 = DEF_tb_read_count_2_EQ_128___d73;
      vcd_write_val(sim_hdl, num++, DEF_v__h1212, 32u);
      backing.DEF_v__h1212 = DEF_v__h1212;
      vcd_write_val(sim_hdl, num++, DEF_v__h1625, 32u);
      backing.DEF_v__h1625 = DEF_v__h1625;
      vcd_write_val(sim_hdl, num++, DEF_x__h1891, 66u);
      backing.DEF_x__h1891 = DEF_x__h1891;
      vcd_write_val(sim_hdl, num++, DEF_x__h1924, 66u);
      backing.DEF_x__h1924 = DEF_x__h1924;
      vcd_write_val(sim_hdl, num++, DEF_x__h2217, 66u);
      backing.DEF_x__h2217 = DEF_x__h2217;
      vcd_write_val(sim_hdl, num++, DEF_x__h2549, 32u);
      backing.DEF_x__h2549 = DEF_x__h2549;
      vcd_write_val(sim_hdl, num++, DEF_x__h263, 66u);
      backing.DEF_x__h263 = DEF_x__h263;
      vcd_write_val(sim_hdl, num++, DEF_x__h3110, 32u);
      backing.DEF_x__h3110 = DEF_x__h3110;
      vcd_write_val(sim_hdl, num++, DEF_x__h349, 66u);
      backing.DEF_x__h349 = DEF_x__h349;
      vcd_write_val(sim_hdl, num++, DEF_x__h427, 66u);
      backing.DEF_x__h427 = DEF_x__h427;
      vcd_write_val(sim_hdl, num++, DEF_x__h511, 66u);
      backing.DEF_x__h511 = DEF_x__h511;
      vcd_write_val(sim_hdl, num++, DEF_x__h560, 66u);
      backing.DEF_x__h560 = DEF_x__h560;
      vcd_write_val(sim_hdl, num++, DEF_x__h626, 6u);
      backing.DEF_x__h626 = DEF_x__h626;
      vcd_write_val(sim_hdl, num++, DEF_x__h630, 6u);
      backing.DEF_x__h630 = DEF_x__h630;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1044, 32u);
      backing.DEF_x_wget__h1044 = DEF_x_wget__h1044;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1458, 32u);
      backing.DEF_x_wget__h1458 = DEF_x_wget__h1458;
      vcd_write_val(sim_hdl, num++, DEF_y__h304, 66u);
      backing.DEF_y__h304 = DEF_y__h304;
      vcd_write_val(sim_hdl, num++, DEF_y__h375, 66u);
      backing.DEF_y__h375 = DEF_y__h375;
      vcd_write_val(sim_hdl, num++, DEF_y__h453, 66u);
      backing.DEF_y__h453 = DEF_y__h453;
      vcd_write_val(sim_hdl, num++, DEF_y__h537, 66u);
      backing.DEF_y__h537 = DEF_y__h537;
    }
}

void MOD_mkTbEx9b::vcd_prims(tVCDDumpType dt, MOD_mkTbEx9b &backing)
{
  INST_mod_i.dump_VCD(dt, backing.INST_mod_i);
  INST_mod_m_neg.dump_VCD(dt, backing.INST_mod_m_neg);
  INST_mod_m_pos.dump_VCD(dt, backing.INST_mod_m_pos);
  INST_mod_p.dump_VCD(dt, backing.INST_mod_p);
  INST_tb_cycle.dump_VCD(dt, backing.INST_tb_cycle);
  INST_tb_feed_count.dump_VCD(dt, backing.INST_tb_feed_count);
  INST_tb_operands_fifo.dump_VCD(dt, backing.INST_tb_operands_fifo);
  INST_tb_randomA_ignore.dump_VCD(dt, backing.INST_tb_randomA_ignore);
  INST_tb_randomA_initialized.dump_VCD(dt, backing.INST_tb_randomA_initialized);
  INST_tb_randomA_zaz.dump_VCD(dt, backing.INST_tb_randomA_zaz);
  INST_tb_randomB_ignore.dump_VCD(dt, backing.INST_tb_randomB_ignore);
  INST_tb_randomB_initialized.dump_VCD(dt, backing.INST_tb_randomB_initialized);
  INST_tb_randomB_zaz.dump_VCD(dt, backing.INST_tb_randomB_zaz);
  INST_tb_read_count.dump_VCD(dt, backing.INST_tb_read_count);
}
