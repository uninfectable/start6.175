/*
 * Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
 * 
 * On Sun Sep 10 13:17:09 UTC 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbEx9a.h"
#include "imported_BDPI_functions.h"


/* Literal declarations */
static unsigned int const UWide_literal_65_h0_arr[] = { 0u, 0u, 0u };
static tUWide const UWide_literal_65_h0(65u, UWide_literal_65_h0_arr);


/* String declarations */
static std::string const __str_literal_2("    if signed: %0d * %0d DUT gave %0d", 37u);
static std::string const __str_literal_5("    if signed: %0d * %0d DUT gave %0d instead of %0d",
					 52u);
static std::string const __str_literal_3("    if unsigned: %0d * %0d DUT gave %0d", 39u);
static std::string const __str_literal_6("    if unsigned: %0d * %0d DUT gave %0d instead of %0d",
					 54u);
static std::string const __str_literal_4("FAILED case %0d", 15u);
static std::string const __str_literal_8("FAILED due to cycle limit", 25u);
static std::string const __str_literal_7("PASSED %0d test cases in %0d cycles", 35u);
static std::string const __str_literal_1("PASSED case %0d", 15u);


/* Constructor */
MOD_mkTbEx9a::MOD_mkTbEx9a(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_mod_i(simHdl, "mod_i", this, 7u, (tUInt8)33u, (tUInt8)0u),
    INST_mod_m_neg(simHdl, "mod_m_neg", this, 130u),
    INST_mod_m_pos(simHdl, "mod_m_pos", this, 130u),
    INST_mod_p(simHdl, "mod_p", this, 130u),
    INST_tb_cycle(simHdl, "tb_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_tb_feed_count(simHdl, "tb_feed_count", this, 32u, 0u, (tUInt8)0u),
    INST_tb_operands_fifo(simHdl, "tb_operands_fifo", this, 128u, 4u, (tUInt8)1u, 0u),
    INST_tb_randomA_ignore(simHdl, "tb_randomA_ignore", this, 64u, (tUInt8)0u),
    INST_tb_randomA_initialized(simHdl, "tb_randomA_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomA_zaz(simHdl, "tb_randomA_zaz", this, 64u, (tUInt8)0u),
    INST_tb_randomB_ignore(simHdl, "tb_randomB_ignore", this, 64u, (tUInt8)0u),
    INST_tb_randomB_initialized(simHdl, "tb_randomB_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomB_zaz(simHdl, "tb_randomB_zaz", this, 64u, (tUInt8)0u),
    INST_tb_read_count(simHdl, "tb_read_count", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h1629(2863311530u),
    DEF_v_BITS_31_TO_0___h1648(2863311530u),
    DEF_v__h1176(2863311530u),
    DEF_v_BITS_31_TO_0___h1195(2863311530u),
    DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95(128u),
    DEF_expected__h3187(128u),
    DEF_signed_mod_p_BITS_128_TO_1_2___d93(128u),
    DEF_v__h3124(128u),
    DEF_mod_p__h3182(130u),
    DEF_y__h304(130u),
    DEF_y__h537(130u),
    DEF_tb_operands_fifo_first____d83(128u),
    DEF_mod_m_neg_BITS_128_TO_0___h463(129u),
    DEF_mod_m_pos_BITS_128_TO_0___h384(129u),
    DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88(256u),
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31(130u),
    DEF_x__h263(130u),
    DEF_x__h349(130u),
    DEF_x__h511(130u),
    DEF_x__h560(130u),
    DEF_x__h427(130u),
    DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85(128u),
    DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87(128u),
    DEF_a__h530(130u),
    DEF_a__h446(130u),
    DEF_a__h282(130u),
    DEF_a__h368(130u),
    DEF_y__h453(130u),
    DEF_y__h375(130u),
    DEF_x__h1969(130u),
    DEF_x__h2002(130u),
    DEF_x__h2519(130u),
    DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66(128u)
{
  symbol_count = 45u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbEx9a::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_mod_mul_step", SYM_DEF, &DEF_CAN_FIRE_RL_mod_mul_step, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_tb_feed", SYM_DEF, &DEF_CAN_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_tb_read", SYM_DEF, &DEF_CAN_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[8u], "mod_i", SYM_MODULE, &INST_mod_i);
  init_symbol(&symbols[9u], "mod_m_neg", SYM_MODULE, &INST_mod_m_neg);
  init_symbol(&symbols[10u], "mod_m_pos", SYM_MODULE, &INST_mod_m_pos);
  init_symbol(&symbols[11u], "mod_p", SYM_MODULE, &INST_mod_p);
  init_symbol(&symbols[12u], "RL_mod_mul_step", SYM_RULE);
  init_symbol(&symbols[13u], "RL_tb_feed", SYM_RULE);
  init_symbol(&symbols[14u], "RL_tb_monitor_test", SYM_RULE);
  init_symbol(&symbols[15u], "RL_tb_randomA_every", SYM_RULE);
  init_symbol(&symbols[16u], "RL_tb_randomA_every_1", SYM_RULE);
  init_symbol(&symbols[17u], "RL_tb_randomB_every", SYM_RULE);
  init_symbol(&symbols[18u], "RL_tb_randomB_every_1", SYM_RULE);
  init_symbol(&symbols[19u], "RL_tb_read", SYM_RULE);
  init_symbol(&symbols[20u], "tb_cycle", SYM_MODULE, &INST_tb_cycle);
  init_symbol(&symbols[21u], "tb_feed_count", SYM_MODULE, &INST_tb_feed_count);
  init_symbol(&symbols[22u], "tb_operands_fifo", SYM_MODULE, &INST_tb_operands_fifo);
  init_symbol(&symbols[23u], "tb_randomA_ignore", SYM_MODULE, &INST_tb_randomA_ignore);
  init_symbol(&symbols[24u], "tb_randomA_initialized", SYM_MODULE, &INST_tb_randomA_initialized);
  init_symbol(&symbols[25u], "tb_randomA_zaz", SYM_MODULE, &INST_tb_randomA_zaz);
  init_symbol(&symbols[26u], "tb_randomB_ignore", SYM_MODULE, &INST_tb_randomB_ignore);
  init_symbol(&symbols[27u], "tb_randomB_initialized", SYM_MODULE, &INST_tb_randomB_initialized);
  init_symbol(&symbols[28u], "tb_randomB_zaz", SYM_MODULE, &INST_tb_randomB_zaz);
  init_symbol(&symbols[29u], "tb_read_count", SYM_MODULE, &INST_tb_read_count);
  init_symbol(&symbols[30u], "v__h1251", SYM_DEF, &DEF_v__h1251, 64u);
  init_symbol(&symbols[31u], "v__h1703", SYM_DEF, &DEF_v__h1703, 64u);
  init_symbol(&symbols[32u],
	      "WILL_FIRE_RL_mod_mul_step",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mod_mul_step,
	      1u);
  init_symbol(&symbols[33u], "WILL_FIRE_RL_tb_feed", SYM_DEF, &DEF_WILL_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[34u],
	      "WILL_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[39u], "WILL_FIRE_RL_tb_read", SYM_DEF, &DEF_WILL_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[40u], "x__h3075", SYM_DEF, &DEF_x__h3075, 32u);
  init_symbol(&symbols[41u], "x__h3636", SYM_DEF, &DEF_x__h3636, 32u);
  init_symbol(&symbols[42u], "x__h630", SYM_DEF, &DEF_x__h630, 7u);
  init_symbol(&symbols[43u], "x_wget__h1044", SYM_DEF, &DEF_x_wget__h1044, 64u);
  init_symbol(&symbols[44u], "x_wget__h1497", SYM_DEF, &DEF_x_wget__h1497, 64u);
}


/* Rule actions */

void MOD_mkTbEx9a::RL_mod_mul_step()
{
  tUInt8 DEF_pr__h174;
  DEF_mod_p__h3182 = INST_mod_p.METH_read();
  DEF_y__h304 = INST_mod_m_pos.METH_read();
  DEF_y__h537 = INST_mod_m_neg.METH_read();
  DEF_x__h630 = INST_mod_i.METH_read();
  wop_primExtractWide(129u,
		      130u,
		      DEF_y__h537,
		      32u,
		      128u,
		      32u,
		      0u,
		      DEF_mod_m_neg_BITS_128_TO_0___h463);
  wop_primExtractWide(129u,
		      130u,
		      DEF_y__h304,
		      32u,
		      128u,
		      32u,
		      0u,
		      DEF_mod_m_pos_BITS_128_TO_0___h384);
  DEF_pr__h174 = DEF_mod_p__h3182.get_bits_in_word8(0u, 0u, 3u);
  wop_primShiftRAWide(130u, 130u, DEF_mod_p__h3182, 32u, 2u, DEF_x__h560);
  wop_add(DEF_mod_p__h3182, DEF_y__h537, DEF_a__h530);
  wop_primShiftRAWide(130u, 130u, DEF_a__h530, 32u, 2u, DEF_x__h511);
  wop_add(DEF_mod_p__h3182, DEF_y__h304, DEF_a__h282);
  wop_primShiftRAWide(130u, 130u, DEF_a__h282, 32u, 2u, DEF_x__h263);
  DEF_y__h453.set_bits_in_word(primExtract8(2u,
					    129u,
					    DEF_mod_m_neg_BITS_128_TO_0___h463,
					    32u,
					    128u,
					    32u,
					    127u),
			       4u,
			       0u,
			       2u).set_whole_word(primExtract32(32u,
								129u,
								DEF_mod_m_neg_BITS_128_TO_0___h463,
								32u,
								126u,
								32u,
								95u),
						  3u).set_whole_word(primExtract32(32u,
										   129u,
										   DEF_mod_m_neg_BITS_128_TO_0___h463,
										   32u,
										   94u,
										   32u,
										   63u),
								     2u).set_whole_word(primExtract32(32u,
												      129u,
												      DEF_mod_m_neg_BITS_128_TO_0___h463,
												      32u,
												      62u,
												      32u,
												      31u),
											1u).set_whole_word((DEF_mod_m_neg_BITS_128_TO_0___h463.get_bits_in_word32(0u,
																				  0u,
																				  31u) << 1u) | (tUInt32)((tUInt8)0u),
													   0u);
  wop_add(DEF_mod_p__h3182, DEF_y__h453, DEF_a__h446);
  wop_primShiftRAWide(130u, 130u, DEF_a__h446, 32u, 2u, DEF_x__h427);
  DEF_y__h375.set_bits_in_word(primExtract8(2u,
					    129u,
					    DEF_mod_m_pos_BITS_128_TO_0___h384,
					    32u,
					    128u,
					    32u,
					    127u),
			       4u,
			       0u,
			       2u).set_whole_word(primExtract32(32u,
								129u,
								DEF_mod_m_pos_BITS_128_TO_0___h384,
								32u,
								126u,
								32u,
								95u),
						  3u).set_whole_word(primExtract32(32u,
										   129u,
										   DEF_mod_m_pos_BITS_128_TO_0___h384,
										   32u,
										   94u,
										   32u,
										   63u),
								     2u).set_whole_word(primExtract32(32u,
												      129u,
												      DEF_mod_m_pos_BITS_128_TO_0___h384,
												      32u,
												      62u,
												      32u,
												      31u),
											1u).set_whole_word((DEF_mod_m_pos_BITS_128_TO_0___h384.get_bits_in_word32(0u,
																				  0u,
																				  31u) << 1u) | (tUInt32)((tUInt8)0u),
													   0u);
  wop_add(DEF_mod_p__h3182, DEF_y__h375, DEF_a__h368);
  wop_primShiftRAWide(130u, 130u, DEF_a__h368, 32u, 2u, DEF_x__h349);
  switch (DEF_pr__h174) {
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h263;
    break;
  case (tUInt8)3u:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h349;
    break;
  case (tUInt8)4u:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h427;
    break;
  case (tUInt8)5u:
  case (tUInt8)6u:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h511;
    break;
  default:
    DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_x__h560;
  }
  DEF_x__h626 = (tUInt8)127u & (DEF_x__h630 + (tUInt8)1u);
  INST_mod_p.METH_write(DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31);
  INST_mod_i.METH_write(DEF_x__h626);
}

void MOD_mkTbEx9a::RL_tb_randomA_every()
{
  tUInt64 DEF_new_value__h1219;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    rand32();
    DEF_v_BITS_31_TO_0___h1195 = rand32();
  }
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1176 = rand32();
  DEF_new_value__h1219 = (((tUInt64)(DEF_v_BITS_31_TO_0___h1195)) << 32u) | (tUInt64)(DEF_v__h1176);
  INST_tb_randomA_zaz.METH_wset(DEF_new_value__h1219);
}

void MOD_mkTbEx9a::RL_tb_randomA_every_1()
{
  DEF_x_wget__h1044 = INST_tb_randomA_zaz.METH_wget();
  DEF_tb_randomA_zaz_whas____d38 = INST_tb_randomA_zaz.METH_whas();
  DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40 = DEF_x_wget__h1044;
  DEF_v__h1251 = DEF_tb_randomA_zaz_whas____d38 ? DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40 : 0llu;
  INST_tb_randomA_ignore.METH_wset(DEF_v__h1251);
}

void MOD_mkTbEx9a::RL_tb_randomB_every()
{
  tUInt64 DEF_new_value__h1672;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    rand32();
    DEF_v_BITS_31_TO_0___h1648 = rand32();
  }
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1629 = rand32();
  DEF_new_value__h1672 = (((tUInt64)(DEF_v_BITS_31_TO_0___h1648)) << 32u) | (tUInt64)(DEF_v__h1629);
  INST_tb_randomB_zaz.METH_wset(DEF_new_value__h1672);
}

void MOD_mkTbEx9a::RL_tb_randomB_every_1()
{
  DEF_x_wget__h1497 = INST_tb_randomB_zaz.METH_wget();
  DEF_v__h1703 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1497 : 0llu;
  INST_tb_randomB_ignore.METH_wset(DEF_v__h1703);
}

void MOD_mkTbEx9a::RL_tb_feed()
{
  tUInt32 DEF_x__h3056;
  tUInt8 DEF_NOT_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_rando_ETC___d65;
  tUInt8 DEF__1__h2479;
  tUInt64 DEF_IF_tb_randomA_zaz_whas__8_THEN_NEG_IF_tb_rando_ETC___d71;
  tUInt8 DEF__1__h2987;
  DEF_x_wget__h1497 = INST_tb_randomB_zaz.METH_wget();
  DEF_x_wget__h1044 = INST_tb_randomA_zaz.METH_wget();
  DEF_x__h3075 = INST_tb_feed_count.METH_read();
  DEF_tb_randomA_zaz_whas____d38 = INST_tb_randomA_zaz.METH_whas();
  DEF_v__h1703 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1497 : 0llu;
  DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40 = DEF_x_wget__h1044;
  DEF_IF_tb_randomA_zaz_whas__8_THEN_NEG_IF_tb_rando_ETC___d71 = DEF_tb_randomA_zaz_whas____d38 ? -DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40 : 0llu;
  DEF__1__h2987 = (tUInt8)(DEF_IF_tb_randomA_zaz_whas__8_THEN_NEG_IF_tb_rando_ETC___d71 >> 63u);
  DEF_v__h1251 = DEF_tb_randomA_zaz_whas____d38 ? DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40 : 0llu;
  DEF__1__h2479 = (tUInt8)(DEF_v__h1251 >> 63u);
  DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50 = DEF_v__h1251 == 9223372036854775808llu;
  DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51 = DEF_v__h1703 == 9223372036854775808llu;
  DEF_NOT_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_rando_ETC___d65 = !DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50 && !DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51;
  DEF_x__h3056 = DEF_x__h3075 + 1u;
  DEF_x__h1969.set_bits_in_word(primExtract8(2u, 65u, UWide_literal_65_h0, 32u, 64u, 32u, 63u),
				4u,
				0u,
				2u).set_whole_word(primExtract32(32u, 65u, UWide_literal_65_h0, 32u, 62u, 32u, 31u),
						   3u).set_whole_word((UWide_literal_65_h0.get_bits_in_word32(0u,
													      0u,
													      31u) << 1u) | (tUInt32)((tUInt8)(DEF_v__h1703 >> 63u)),
								      2u).set_whole_word((tUInt32)(DEF_v__h1703 >> 31u),
											 1u).set_whole_word((((tUInt32)(2147483647u & DEF_v__h1703)) << 1u) | (tUInt32)((tUInt8)0u),
													    0u);
  DEF_x__h2002.set_bits_in_word((tUInt8)3u & ((DEF__1__h2479 << 1u) | (tUInt8)(DEF_v__h1251 >> 63u)),
				4u,
				0u,
				2u).set_whole_word((tUInt32)(DEF_v__h1251 >> 31u),
						   3u).set_whole_word((((tUInt32)(2147483647u & DEF_v__h1251)) << 1u) | (tUInt32)(UWide_literal_65_h0.get_bits_in_word8(2u,
																					0u,
																					1u)),
								      2u).set_whole_word(UWide_literal_65_h0.get_whole_word(1u),
											 1u).set_whole_word(UWide_literal_65_h0.get_whole_word(0u),
													    0u);
  DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66.set_whole_word((tUInt32)(DEF_v__h1251 >> 32u),
									      3u).build_concat((((tUInt64)((tUInt32)(DEF_v__h1251))) << 32u) | (tUInt64)((tUInt32)(DEF_v__h1703 >> 32u)),
											       32u,
											       64u).set_whole_word((tUInt32)(DEF_v__h1703),
														   0u);
  DEF_x__h2519.set_bits_in_word((tUInt8)3u & ((DEF__1__h2987 << 1u) | (tUInt8)(DEF_IF_tb_randomA_zaz_whas__8_THEN_NEG_IF_tb_rando_ETC___d71 >> 63u)),
				4u,
				0u,
				2u).set_whole_word((tUInt32)(DEF_IF_tb_randomA_zaz_whas__8_THEN_NEG_IF_tb_rando_ETC___d71 >> 31u),
						   3u).set_whole_word((((tUInt32)(2147483647u & DEF_IF_tb_randomA_zaz_whas__8_THEN_NEG_IF_tb_rando_ETC___d71)) << 1u) | (tUInt32)(UWide_literal_65_h0.get_bits_in_word8(2u,
																											0u,
																											1u)),
								      2u).set_whole_word(UWide_literal_65_h0.get_whole_word(1u),
											 1u).set_whole_word(UWide_literal_65_h0.get_whole_word(0u),
													    0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_rando_ETC___d65)
    INST_tb_operands_fifo.METH_enq(DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_rando_ETC___d65)
    INST_mod_p.METH_write(DEF_x__h1969);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_rando_ETC___d65)
    INST_mod_m_pos.METH_write(DEF_x__h2002);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_rando_ETC___d65)
    INST_mod_m_neg.METH_write(DEF_x__h2519);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_rando_ETC___d65)
    INST_mod_i.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_rando_ETC___d65)
    INST_tb_feed_count.METH_write(DEF_x__h3056);
}

void MOD_mkTbEx9a::RL_tb_read()
{
  tUInt32 DEF_x__h3512;
  tUInt8 DEF_NOT_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands__ETC___d94;
  tUInt64 DEF_b__h3100;
  tUInt64 DEF_signed_tb_operands_fifo_first__3_BITS_63_TO_0_6___d92;
  tUInt64 DEF_a__h3099;
  tUInt64 DEF_signed_tb_operands_fifo_first__3_BITS_127_TO__ETC___d91;
  tUInt8 DEF_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands_fifo_ETC___d90;
  DEF_mod_p__h3182 = INST_mod_p.METH_read();
  wop_primExtractWide(128u, 130u, DEF_mod_p__h3182, 32u, 128u, 32u, 1u, DEF_v__h3124);
  DEF_signed_mod_p_BITS_128_TO_1_2___d93 = DEF_v__h3124;
  DEF_tb_operands_fifo_first____d83 = INST_tb_operands_fifo.METH_first();
  DEF_a__h3099 = primExtract64(64u, 128u, DEF_tb_operands_fifo_first____d83, 32u, 127u, 32u, 64u);
  DEF_signed_tb_operands_fifo_first__3_BITS_127_TO__ETC___d91 = DEF_a__h3099;
  DEF_b__h3100 = primExtract64(64u, 128u, DEF_tb_operands_fifo_first____d83, 32u, 63u, 32u, 0u);
  DEF_signed_tb_operands_fifo_first__3_BITS_63_TO_0_6___d92 = DEF_b__h3100;
  DEF_x__h3636 = INST_tb_read_count.METH_read();
  DEF_x__h630 = INST_mod_i.METH_read();
  wop_primSignExtWide(128u,
		      64u,
		      (tUInt64)(DEF_a__h3099),
		      DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85);
  wop_primSignExtWide(128u,
		      64u,
		      (tUInt64)(DEF_b__h3100),
		      DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87);
  wop_mul(DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85,
	  DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87,
	  DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88);
  wop_primExtractWide(128u,
		      256u,
		      DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88,
		      32u,
		      127u,
		      32u,
		      0u,
		      DEF_expected__h3187);
  DEF_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands_fifo_ETC___d90 = DEF_v__h3124 == DEF_expected__h3187;
  DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95 = DEF_expected__h3187;
  DEF_NOT_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands__ETC___d94 = !DEF_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands_fifo_ETC___d90;
  DEF_x__h3512 = DEF_x__h3636 + 1u;
  DEF_x__h626 = (tUInt8)127u & (DEF_x__h630 + (tUInt8)1u);
  INST_tb_operands_fifo.METH_deq();
  INST_mod_i.METH_write(DEF_x__h626);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands_fifo_ETC___d90)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h3636);
    if (DEF_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands_fifo_ETC___d90)
      dollar_display(sim_hdl,
		     this,
		     "s,-64,-64,-128p",
		     &__str_literal_2,
		     DEF_signed_tb_operands_fifo_first__3_BITS_127_TO__ETC___d91,
		     DEF_signed_tb_operands_fifo_first__3_BITS_63_TO_0_6___d92,
		     &DEF_signed_mod_p_BITS_128_TO_1_2___d93);
    if (DEF_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands_fifo_ETC___d90)
      dollar_display(sim_hdl,
		     this,
		     "s,64,64,128p",
		     &__str_literal_3,
		     DEF_a__h3099,
		     DEF_b__h3100,
		     &DEF_v__h3124);
    if (DEF_NOT_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands__ETC___d94)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_4, DEF_x__h3636);
    if (DEF_NOT_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands__ETC___d94)
      dollar_display(sim_hdl,
		     this,
		     "s,-64,-64,-128p,-128p",
		     &__str_literal_5,
		     DEF_signed_tb_operands_fifo_first__3_BITS_127_TO__ETC___d91,
		     DEF_signed_tb_operands_fifo_first__3_BITS_63_TO_0_6___d92,
		     &DEF_signed_mod_p_BITS_128_TO_1_2___d93,
		     &DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95);
    if (DEF_NOT_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands__ETC___d94)
      dollar_display(sim_hdl,
		     this,
		     "s,64,64,128p,128p",
		     &__str_literal_6,
		     DEF_a__h3099,
		     DEF_b__h3100,
		     &DEF_v__h3124,
		     &DEF_expected__h3187);
    if (DEF_NOT_mod_p_BITS_128_TO_1_2_EQ_SEXT_tb_operands__ETC___d94)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_read_count.METH_write(DEF_x__h3512);
}

void MOD_mkTbEx9a::RL_tb_monitor_test()
{
  tUInt32 DEF_x__h3865;
  tUInt8 DEF_tb_cycle_7_EQ_0___d98;
  tUInt8 DEF_tb_cycle_7_EQ_16384___d99;
  tUInt32 DEF_x__h3869;
  DEF_x__h3636 = INST_tb_read_count.METH_read();
  DEF_x__h3869 = INST_tb_cycle.METH_read();
  DEF_tb_cycle_7_EQ_16384___d99 = DEF_x__h3869 == 16384u;
  DEF_tb_cycle_7_EQ_0___d98 = DEF_x__h3869 == 0u;
  DEF_tb_read_count_6_EQ_128___d77 = DEF_x__h3636 == 128u;
  DEF_x__h3865 = DEF_x__h3869 + 1u;
  if (DEF_tb_cycle_7_EQ_0___d98)
    INST_tb_randomA_initialized.METH_write((tUInt8)1u);
  if (DEF_tb_cycle_7_EQ_0___d98)
    INST_tb_randomB_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_tb_read_count_6_EQ_128___d77)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_7, DEF_x__h3636, DEF_x__h3869);
    if (DEF_tb_read_count_6_EQ_128___d77)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_tb_cycle_7_EQ_16384___d99)
      dollar_display(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_tb_cycle_7_EQ_16384___d99)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_cycle.METH_write(DEF_x__h3865);
}


/* Methods */


/* Reset routines */

void MOD_mkTbEx9a::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_tb_read_count.reset_RST(ARG_rst_in);
  INST_tb_randomB_initialized.reset_RST(ARG_rst_in);
  INST_tb_randomA_initialized.reset_RST(ARG_rst_in);
  INST_tb_operands_fifo.reset_RST(ARG_rst_in);
  INST_tb_feed_count.reset_RST(ARG_rst_in);
  INST_tb_cycle.reset_RST(ARG_rst_in);
  INST_mod_i.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbEx9a::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbEx9a::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_mod_i.dump_state(indent + 2u);
  INST_mod_m_neg.dump_state(indent + 2u);
  INST_mod_m_pos.dump_state(indent + 2u);
  INST_mod_p.dump_state(indent + 2u);
  INST_tb_cycle.dump_state(indent + 2u);
  INST_tb_feed_count.dump_state(indent + 2u);
  INST_tb_operands_fifo.dump_state(indent + 2u);
  INST_tb_randomA_ignore.dump_state(indent + 2u);
  INST_tb_randomA_initialized.dump_state(indent + 2u);
  INST_tb_randomA_zaz.dump_state(indent + 2u);
  INST_tb_randomB_ignore.dump_state(indent + 2u);
  INST_tb_randomB_initialized.dump_state(indent + 2u);
  INST_tb_randomB_zaz.dump_state(indent + 2u);
  INST_tb_read_count.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbEx9a::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 77u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mod_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mod_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a__h282", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a__h368", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a__h446", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a__h530", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "expected__h3187", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_m_neg_BITS_128_TO_0___h463", 129u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_m_pos_BITS_128_TO_0___h384", 129u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_p__h3182", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_mod_p_BITS_128_TO_1_2___d93", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_operands_fifo_first____d83", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_randomA_zaz_whas____d38", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_read_count_6_EQ_128___d77", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v_BITS_31_TO_0___h1195", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v_BITS_31_TO_0___h1648", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1176", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1251", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1629", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1703", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h3124", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1969", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2002", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2519", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h263", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h3075", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h349", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h3636", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h427", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h511", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h560", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h626", 7u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h630", 7u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1044", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1497", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h304", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h375", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h453", 130u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h537", 130u);
  num = INST_mod_i.dump_VCD_defs(num);
  num = INST_mod_m_neg.dump_VCD_defs(num);
  num = INST_mod_m_pos.dump_VCD_defs(num);
  num = INST_mod_p.dump_VCD_defs(num);
  num = INST_tb_cycle.dump_VCD_defs(num);
  num = INST_tb_feed_count.dump_VCD_defs(num);
  num = INST_tb_operands_fifo.dump_VCD_defs(num);
  num = INST_tb_randomA_ignore.dump_VCD_defs(num);
  num = INST_tb_randomA_initialized.dump_VCD_defs(num);
  num = INST_tb_randomA_zaz.dump_VCD_defs(num);
  num = INST_tb_randomB_ignore.dump_VCD_defs(num);
  num = INST_tb_randomB_initialized.dump_VCD_defs(num);
  num = INST_tb_randomB_zaz.dump_VCD_defs(num);
  num = INST_tb_read_count.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbEx9a::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbEx9a &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbEx9a::vcd_defs(tVCDDumpType dt, MOD_mkTbEx9a &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 129u);
    vcd_write_x(sim_hdl, num++, 129u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 7u);
    vcd_write_x(sim_hdl, num++, 7u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
    vcd_write_x(sim_hdl, num++, 130u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_mod_mul_step) != DEF_CAN_FIRE_RL_mod_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mod_mul_step, 1u);
	backing.DEF_CAN_FIRE_RL_mod_mul_step = DEF_CAN_FIRE_RL_mod_mul_step;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_feed) != DEF_CAN_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_feed, 1u);
	backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_monitor_test) != DEF_CAN_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every) != DEF_CAN_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every_1) != DEF_CAN_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every) != DEF_CAN_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every_1) != DEF_CAN_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_read) != DEF_CAN_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_read, 1u);
	backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31) != DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31, 130u);
	backing.DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50) != DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50, 1u);
	backing.DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50 = DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66) != DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66, 128u);
	backing.DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66 = DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40) != DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40, 64u);
	backing.DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40 = DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51) != DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51, 1u);
	backing.DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51 = DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85) != DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85)
      {
	vcd_write_val(sim_hdl, num, DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85, 128u);
	backing.DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85 = DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85;
      }
      ++num;
      if ((backing.DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88) != DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88)
      {
	vcd_write_val(sim_hdl, num, DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88, 256u);
	backing.DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88 = DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88;
      }
      ++num;
      if ((backing.DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87) != DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87)
      {
	vcd_write_val(sim_hdl, num, DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87, 128u);
	backing.DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87 = DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mod_mul_step) != DEF_WILL_FIRE_RL_mod_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mod_mul_step, 1u);
	backing.DEF_WILL_FIRE_RL_mod_mul_step = DEF_WILL_FIRE_RL_mod_mul_step;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_feed) != DEF_WILL_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_feed, 1u);
	backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_monitor_test) != DEF_WILL_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every) != DEF_WILL_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every_1) != DEF_WILL_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every) != DEF_WILL_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every_1) != DEF_WILL_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_read) != DEF_WILL_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_read, 1u);
	backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_a__h282) != DEF_a__h282)
      {
	vcd_write_val(sim_hdl, num, DEF_a__h282, 130u);
	backing.DEF_a__h282 = DEF_a__h282;
      }
      ++num;
      if ((backing.DEF_a__h368) != DEF_a__h368)
      {
	vcd_write_val(sim_hdl, num, DEF_a__h368, 130u);
	backing.DEF_a__h368 = DEF_a__h368;
      }
      ++num;
      if ((backing.DEF_a__h446) != DEF_a__h446)
      {
	vcd_write_val(sim_hdl, num, DEF_a__h446, 130u);
	backing.DEF_a__h446 = DEF_a__h446;
      }
      ++num;
      if ((backing.DEF_a__h530) != DEF_a__h530)
      {
	vcd_write_val(sim_hdl, num, DEF_a__h530, 130u);
	backing.DEF_a__h530 = DEF_a__h530;
      }
      ++num;
      if ((backing.DEF_expected__h3187) != DEF_expected__h3187)
      {
	vcd_write_val(sim_hdl, num, DEF_expected__h3187, 128u);
	backing.DEF_expected__h3187 = DEF_expected__h3187;
      }
      ++num;
      if ((backing.DEF_mod_m_neg_BITS_128_TO_0___h463) != DEF_mod_m_neg_BITS_128_TO_0___h463)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_m_neg_BITS_128_TO_0___h463, 129u);
	backing.DEF_mod_m_neg_BITS_128_TO_0___h463 = DEF_mod_m_neg_BITS_128_TO_0___h463;
      }
      ++num;
      if ((backing.DEF_mod_m_pos_BITS_128_TO_0___h384) != DEF_mod_m_pos_BITS_128_TO_0___h384)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_m_pos_BITS_128_TO_0___h384, 129u);
	backing.DEF_mod_m_pos_BITS_128_TO_0___h384 = DEF_mod_m_pos_BITS_128_TO_0___h384;
      }
      ++num;
      if ((backing.DEF_mod_p__h3182) != DEF_mod_p__h3182)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_p__h3182, 130u);
	backing.DEF_mod_p__h3182 = DEF_mod_p__h3182;
      }
      ++num;
      if ((backing.DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95) != DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95, 128u);
	backing.DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95 = DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95;
      }
      ++num;
      if ((backing.DEF_signed_mod_p_BITS_128_TO_1_2___d93) != DEF_signed_mod_p_BITS_128_TO_1_2___d93)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_mod_p_BITS_128_TO_1_2___d93, 128u);
	backing.DEF_signed_mod_p_BITS_128_TO_1_2___d93 = DEF_signed_mod_p_BITS_128_TO_1_2___d93;
      }
      ++num;
      if ((backing.DEF_tb_operands_fifo_first____d83) != DEF_tb_operands_fifo_first____d83)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_operands_fifo_first____d83, 128u);
	backing.DEF_tb_operands_fifo_first____d83 = DEF_tb_operands_fifo_first____d83;
      }
      ++num;
      if ((backing.DEF_tb_randomA_zaz_whas____d38) != DEF_tb_randomA_zaz_whas____d38)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_randomA_zaz_whas____d38, 1u);
	backing.DEF_tb_randomA_zaz_whas____d38 = DEF_tb_randomA_zaz_whas____d38;
      }
      ++num;
      if ((backing.DEF_tb_read_count_6_EQ_128___d77) != DEF_tb_read_count_6_EQ_128___d77)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_read_count_6_EQ_128___d77, 1u);
	backing.DEF_tb_read_count_6_EQ_128___d77 = DEF_tb_read_count_6_EQ_128___d77;
      }
      ++num;
      if ((backing.DEF_v_BITS_31_TO_0___h1195) != DEF_v_BITS_31_TO_0___h1195)
      {
	vcd_write_val(sim_hdl, num, DEF_v_BITS_31_TO_0___h1195, 32u);
	backing.DEF_v_BITS_31_TO_0___h1195 = DEF_v_BITS_31_TO_0___h1195;
      }
      ++num;
      if ((backing.DEF_v_BITS_31_TO_0___h1648) != DEF_v_BITS_31_TO_0___h1648)
      {
	vcd_write_val(sim_hdl, num, DEF_v_BITS_31_TO_0___h1648, 32u);
	backing.DEF_v_BITS_31_TO_0___h1648 = DEF_v_BITS_31_TO_0___h1648;
      }
      ++num;
      if ((backing.DEF_v__h1176) != DEF_v__h1176)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1176, 32u);
	backing.DEF_v__h1176 = DEF_v__h1176;
      }
      ++num;
      if ((backing.DEF_v__h1251) != DEF_v__h1251)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1251, 64u);
	backing.DEF_v__h1251 = DEF_v__h1251;
      }
      ++num;
      if ((backing.DEF_v__h1629) != DEF_v__h1629)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1629, 32u);
	backing.DEF_v__h1629 = DEF_v__h1629;
      }
      ++num;
      if ((backing.DEF_v__h1703) != DEF_v__h1703)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1703, 64u);
	backing.DEF_v__h1703 = DEF_v__h1703;
      }
      ++num;
      if ((backing.DEF_v__h3124) != DEF_v__h3124)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h3124, 128u);
	backing.DEF_v__h3124 = DEF_v__h3124;
      }
      ++num;
      if ((backing.DEF_x__h1969) != DEF_x__h1969)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1969, 130u);
	backing.DEF_x__h1969 = DEF_x__h1969;
      }
      ++num;
      if ((backing.DEF_x__h2002) != DEF_x__h2002)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2002, 130u);
	backing.DEF_x__h2002 = DEF_x__h2002;
      }
      ++num;
      if ((backing.DEF_x__h2519) != DEF_x__h2519)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2519, 130u);
	backing.DEF_x__h2519 = DEF_x__h2519;
      }
      ++num;
      if ((backing.DEF_x__h263) != DEF_x__h263)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h263, 130u);
	backing.DEF_x__h263 = DEF_x__h263;
      }
      ++num;
      if ((backing.DEF_x__h3075) != DEF_x__h3075)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h3075, 32u);
	backing.DEF_x__h3075 = DEF_x__h3075;
      }
      ++num;
      if ((backing.DEF_x__h349) != DEF_x__h349)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h349, 130u);
	backing.DEF_x__h349 = DEF_x__h349;
      }
      ++num;
      if ((backing.DEF_x__h3636) != DEF_x__h3636)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h3636, 32u);
	backing.DEF_x__h3636 = DEF_x__h3636;
      }
      ++num;
      if ((backing.DEF_x__h427) != DEF_x__h427)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h427, 130u);
	backing.DEF_x__h427 = DEF_x__h427;
      }
      ++num;
      if ((backing.DEF_x__h511) != DEF_x__h511)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h511, 130u);
	backing.DEF_x__h511 = DEF_x__h511;
      }
      ++num;
      if ((backing.DEF_x__h560) != DEF_x__h560)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h560, 130u);
	backing.DEF_x__h560 = DEF_x__h560;
      }
      ++num;
      if ((backing.DEF_x__h626) != DEF_x__h626)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h626, 7u);
	backing.DEF_x__h626 = DEF_x__h626;
      }
      ++num;
      if ((backing.DEF_x__h630) != DEF_x__h630)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h630, 7u);
	backing.DEF_x__h630 = DEF_x__h630;
      }
      ++num;
      if ((backing.DEF_x_wget__h1044) != DEF_x_wget__h1044)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1044, 64u);
	backing.DEF_x_wget__h1044 = DEF_x_wget__h1044;
      }
      ++num;
      if ((backing.DEF_x_wget__h1497) != DEF_x_wget__h1497)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1497, 64u);
	backing.DEF_x_wget__h1497 = DEF_x_wget__h1497;
      }
      ++num;
      if ((backing.DEF_y__h304) != DEF_y__h304)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h304, 130u);
	backing.DEF_y__h304 = DEF_y__h304;
      }
      ++num;
      if ((backing.DEF_y__h375) != DEF_y__h375)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h375, 130u);
	backing.DEF_y__h375 = DEF_y__h375;
      }
      ++num;
      if ((backing.DEF_y__h453) != DEF_y__h453)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h453, 130u);
	backing.DEF_y__h453 = DEF_y__h453;
      }
      ++num;
      if ((backing.DEF_y__h537) != DEF_y__h537)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h537, 130u);
	backing.DEF_y__h537 = DEF_y__h537;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mod_mul_step, 1u);
      backing.DEF_CAN_FIRE_RL_mod_mul_step = DEF_CAN_FIRE_RL_mod_mul_step;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_feed, 1u);
      backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_read, 1u);
      backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31, 130u);
      backing.DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31 = DEF_IF_mod_p_BITS_2_TO_0_EQ_0b1_OR_mod_p_BITS_2_TO_ETC___d31;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50, 1u);
      backing.DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50 = DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d50;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66, 128u);
      backing.DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66 = DEF_IF_tb_randomA_zaz_whas__8_THEN_IF_tb_randomA_z_ETC___d66;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40, 64u);
      backing.DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40 = DEF_IF_tb_randomA_zaz_whas__8_THEN_tb_randomA_zaz__ETC___d40;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51, 1u);
      backing.DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51 = DEF_IF_tb_randomB_zaz_whas__7_THEN_tb_randomB_zaz__ETC___d51;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85, 128u);
      backing.DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85 = DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64_4___d85;
      vcd_write_val(sim_hdl, num++, DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88, 256u);
      backing.DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88 = DEF_SEXT_tb_operands_fifo_first__3_BITS_127_TO_64__ETC___d88;
      vcd_write_val(sim_hdl, num++, DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87, 128u);
      backing.DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87 = DEF_SEXT_tb_operands_fifo_first__3_BITS_63_TO_0_6___d87;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mod_mul_step, 1u);
      backing.DEF_WILL_FIRE_RL_mod_mul_step = DEF_WILL_FIRE_RL_mod_mul_step;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_feed, 1u);
      backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_read, 1u);
      backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_a__h282, 130u);
      backing.DEF_a__h282 = DEF_a__h282;
      vcd_write_val(sim_hdl, num++, DEF_a__h368, 130u);
      backing.DEF_a__h368 = DEF_a__h368;
      vcd_write_val(sim_hdl, num++, DEF_a__h446, 130u);
      backing.DEF_a__h446 = DEF_a__h446;
      vcd_write_val(sim_hdl, num++, DEF_a__h530, 130u);
      backing.DEF_a__h530 = DEF_a__h530;
      vcd_write_val(sim_hdl, num++, DEF_expected__h3187, 128u);
      backing.DEF_expected__h3187 = DEF_expected__h3187;
      vcd_write_val(sim_hdl, num++, DEF_mod_m_neg_BITS_128_TO_0___h463, 129u);
      backing.DEF_mod_m_neg_BITS_128_TO_0___h463 = DEF_mod_m_neg_BITS_128_TO_0___h463;
      vcd_write_val(sim_hdl, num++, DEF_mod_m_pos_BITS_128_TO_0___h384, 129u);
      backing.DEF_mod_m_pos_BITS_128_TO_0___h384 = DEF_mod_m_pos_BITS_128_TO_0___h384;
      vcd_write_val(sim_hdl, num++, DEF_mod_p__h3182, 130u);
      backing.DEF_mod_p__h3182 = DEF_mod_p__h3182;
      vcd_write_val(sim_hdl, num++, DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95, 128u);
      backing.DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95 = DEF_signed_SEXT_tb_operands_fifo_first__3_BITS_12_ETC___d95;
      vcd_write_val(sim_hdl, num++, DEF_signed_mod_p_BITS_128_TO_1_2___d93, 128u);
      backing.DEF_signed_mod_p_BITS_128_TO_1_2___d93 = DEF_signed_mod_p_BITS_128_TO_1_2___d93;
      vcd_write_val(sim_hdl, num++, DEF_tb_operands_fifo_first____d83, 128u);
      backing.DEF_tb_operands_fifo_first____d83 = DEF_tb_operands_fifo_first____d83;
      vcd_write_val(sim_hdl, num++, DEF_tb_randomA_zaz_whas____d38, 1u);
      backing.DEF_tb_randomA_zaz_whas____d38 = DEF_tb_randomA_zaz_whas____d38;
      vcd_write_val(sim_hdl, num++, DEF_tb_read_count_6_EQ_128___d77, 1u);
      backing.DEF_tb_read_count_6_EQ_128___d77 = DEF_tb_read_count_6_EQ_128___d77;
      vcd_write_val(sim_hdl, num++, DEF_v_BITS_31_TO_0___h1195, 32u);
      backing.DEF_v_BITS_31_TO_0___h1195 = DEF_v_BITS_31_TO_0___h1195;
      vcd_write_val(sim_hdl, num++, DEF_v_BITS_31_TO_0___h1648, 32u);
      backing.DEF_v_BITS_31_TO_0___h1648 = DEF_v_BITS_31_TO_0___h1648;
      vcd_write_val(sim_hdl, num++, DEF_v__h1176, 32u);
      backing.DEF_v__h1176 = DEF_v__h1176;
      vcd_write_val(sim_hdl, num++, DEF_v__h1251, 64u);
      backing.DEF_v__h1251 = DEF_v__h1251;
      vcd_write_val(sim_hdl, num++, DEF_v__h1629, 32u);
      backing.DEF_v__h1629 = DEF_v__h1629;
      vcd_write_val(sim_hdl, num++, DEF_v__h1703, 64u);
      backing.DEF_v__h1703 = DEF_v__h1703;
      vcd_write_val(sim_hdl, num++, DEF_v__h3124, 128u);
      backing.DEF_v__h3124 = DEF_v__h3124;
      vcd_write_val(sim_hdl, num++, DEF_x__h1969, 130u);
      backing.DEF_x__h1969 = DEF_x__h1969;
      vcd_write_val(sim_hdl, num++, DEF_x__h2002, 130u);
      backing.DEF_x__h2002 = DEF_x__h2002;
      vcd_write_val(sim_hdl, num++, DEF_x__h2519, 130u);
      backing.DEF_x__h2519 = DEF_x__h2519;
      vcd_write_val(sim_hdl, num++, DEF_x__h263, 130u);
      backing.DEF_x__h263 = DEF_x__h263;
      vcd_write_val(sim_hdl, num++, DEF_x__h3075, 32u);
      backing.DEF_x__h3075 = DEF_x__h3075;
      vcd_write_val(sim_hdl, num++, DEF_x__h349, 130u);
      backing.DEF_x__h349 = DEF_x__h349;
      vcd_write_val(sim_hdl, num++, DEF_x__h3636, 32u);
      backing.DEF_x__h3636 = DEF_x__h3636;
      vcd_write_val(sim_hdl, num++, DEF_x__h427, 130u);
      backing.DEF_x__h427 = DEF_x__h427;
      vcd_write_val(sim_hdl, num++, DEF_x__h511, 130u);
      backing.DEF_x__h511 = DEF_x__h511;
      vcd_write_val(sim_hdl, num++, DEF_x__h560, 130u);
      backing.DEF_x__h560 = DEF_x__h560;
      vcd_write_val(sim_hdl, num++, DEF_x__h626, 7u);
      backing.DEF_x__h626 = DEF_x__h626;
      vcd_write_val(sim_hdl, num++, DEF_x__h630, 7u);
      backing.DEF_x__h630 = DEF_x__h630;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1044, 64u);
      backing.DEF_x_wget__h1044 = DEF_x_wget__h1044;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1497, 64u);
      backing.DEF_x_wget__h1497 = DEF_x_wget__h1497;
      vcd_write_val(sim_hdl, num++, DEF_y__h304, 130u);
      backing.DEF_y__h304 = DEF_y__h304;
      vcd_write_val(sim_hdl, num++, DEF_y__h375, 130u);
      backing.DEF_y__h375 = DEF_y__h375;
      vcd_write_val(sim_hdl, num++, DEF_y__h453, 130u);
      backing.DEF_y__h453 = DEF_y__h453;
      vcd_write_val(sim_hdl, num++, DEF_y__h537, 130u);
      backing.DEF_y__h537 = DEF_y__h537;
    }
}

void MOD_mkTbEx9a::vcd_prims(tVCDDumpType dt, MOD_mkTbEx9a &backing)
{
  INST_mod_i.dump_VCD(dt, backing.INST_mod_i);
  INST_mod_m_neg.dump_VCD(dt, backing.INST_mod_m_neg);
  INST_mod_m_pos.dump_VCD(dt, backing.INST_mod_m_pos);
  INST_mod_p.dump_VCD(dt, backing.INST_mod_p);
  INST_tb_cycle.dump_VCD(dt, backing.INST_tb_cycle);
  INST_tb_feed_count.dump_VCD(dt, backing.INST_tb_feed_count);
  INST_tb_operands_fifo.dump_VCD(dt, backing.INST_tb_operands_fifo);
  INST_tb_randomA_ignore.dump_VCD(dt, backing.INST_tb_randomA_ignore);
  INST_tb_randomA_initialized.dump_VCD(dt, backing.INST_tb_randomA_initialized);
  INST_tb_randomA_zaz.dump_VCD(dt, backing.INST_tb_randomA_zaz);
  INST_tb_randomB_ignore.dump_VCD(dt, backing.INST_tb_randomB_ignore);
  INST_tb_randomB_initialized.dump_VCD(dt, backing.INST_tb_randomB_initialized);
  INST_tb_randomB_zaz.dump_VCD(dt, backing.INST_tb_randomB_zaz);
  INST_tb_read_count.dump_VCD(dt, backing.INST_tb_read_count);
}
