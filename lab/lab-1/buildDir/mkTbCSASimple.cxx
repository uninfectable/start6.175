/*
 * Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
 * 
 * On Wed Sep  6 08:43:38 UTC 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbCSASimple.h"


/* String declarations */
static std::string const __str_literal_2("%d + %d = %d", 12u);
static std::string const __str_literal_3("FAILED %d + %d gave %d instead of %d", 36u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbCSASimple::MOD_mkTbCSASimple(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbCSASimple::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_test", SYM_RULE);
}


/* Rule actions */

void MOD_mkTbCSASimple::RL_test()
{
  tUInt32 DEF_x__h4122;
  tUInt8 DEF_y__h1463;
  tUInt8 DEF_y__h1249;
  tUInt8 DEF_x__h1248;
  tUInt8 DEF_y__h1247;
  tUInt8 DEF_x__h1246;
  tUInt8 DEF_y__h1465;
  tUInt8 DEF_x__h1464;
  tUInt8 DEF_x__h1462;
  tUInt8 DEF_y__h1681;
  tUInt8 DEF_x__h1680;
  tUInt8 DEF_y__h1679;
  tUInt8 DEF_x__h1678;
  tUInt8 DEF_x__h2021;
  tUInt8 DEF_y__h3306;
  tUInt8 DEF_y__h2279;
  tUInt8 DEF_x__h2278;
  tUInt8 DEF_y__h2277;
  tUInt8 DEF_x__h2276;
  tUInt8 DEF_y__h2495;
  tUInt8 DEF_y__h3522;
  tUInt8 DEF_x__h2494;
  tUInt8 DEF_y__h2493;
  tUInt8 DEF_x__h2492;
  tUInt8 DEF_y__h2711;
  tUInt8 DEF_y__h3738;
  tUInt8 DEF_x__h2710;
  tUInt8 DEF_y__h2709;
  tUInt8 DEF_x__h2708;
  tUInt8 DEF_y__h3304;
  tUInt8 DEF_x__h3303;
  tUInt8 DEF_y__h3520;
  tUInt8 DEF_x__h3519;
  tUInt8 DEF_y__h3736;
  tUInt8 DEF_x__h3735;
  tUInt8 DEF_c__h2806;
  tUInt8 DEF_c__h3833;
  tUInt8 DEF_x__h2817;
  tUInt8 DEF_c__h2591;
  tUInt8 DEF_c__h3618;
  tUInt8 DEF_x__h2602;
  tUInt8 DEF_c__h2375;
  tUInt8 DEF_c__h3402;
  tUInt8 DEF_x__h2386;
  tUInt8 DEF_c__h1776;
  tUInt8 DEF_x__h1787;
  tUInt8 DEF_c__h1561;
  tUInt8 DEF_x__h1572;
  tUInt8 DEF_c__h1345;
  tUInt8 DEF_x__h1356;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d64;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_IF_SEL_ARR_1_8_63_102_177_1_ETC___d99;
  tUInt8 DEF_NOT_cycle_EQ_8___d3;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_NOT_IF_SEL_ARR_1_8_63_102_1_ETC___d101;
  tUInt32 DEF_realAns__h3959;
  tUInt32 DEF_v__h186;
  tUInt8 DEF_IF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BI_ETC___d98;
  tUInt8 DEF_cycle_EQ_8___d2;
  tUInt8 DEF_b__h1129;
  tUInt8 DEF_b__h1234;
  tUInt8 DEF_b__h1450;
  tUInt8 DEF_b__h1666;
  tUInt8 DEF_b__h2009;
  tUInt8 DEF_b__h2264;
  tUInt8 DEF_b__h2480;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8;
  tUInt8 DEF_b__h2696;
  tUInt8 DEF_a__h1128;
  tUInt8 DEF_a__h1233;
  tUInt8 DEF_a__h1449;
  tUInt8 DEF_a__h1665;
  tUInt8 DEF_a__h2008;
  tUInt8 DEF_a__h2263;
  tUInt8 DEF_a__h2479;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5;
  tUInt8 DEF_a__h2695;
  tUInt32 DEF_x__h767;
  DEF_x__h767 = INST_cycle.METH_read();
  switch (DEF_x__h767) {
  case 0u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)63u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)102u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)177u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)128u;
    break;
  case 6u:
  case 7u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)170u;
  }
  DEF_a__h2695 = (tUInt8)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 7u);
  DEF_a__h2479 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 6u));
  DEF_a__h2263 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 5u));
  DEF_a__h2008 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 4u));
  DEF_a__h1665 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 3u));
  DEF_a__h1449 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 2u));
  DEF_a__h1233 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 1u));
  DEF_a__h1128 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5);
  switch (DEF_x__h767) {
  case 0u:
  case 6u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)27u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)92u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)202u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)128u;
    break;
  case 7u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)170u;
  }
  DEF_b__h2696 = (tUInt8)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 7u);
  DEF_b__h2480 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 6u));
  DEF_b__h2264 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 5u));
  DEF_b__h2009 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 4u));
  DEF_b__h1666 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 3u));
  DEF_b__h1450 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 2u));
  DEF_b__h1234 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 1u));
  DEF_b__h1129 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8);
  DEF_cycle_EQ_8___d2 = DEF_x__h767 == 8u;
  DEF_realAns__h3959 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8))));
  DEF_NOT_cycle_EQ_8___d3 = !DEF_cycle_EQ_8___d2;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d64 = DEF_a__h2008 ^ DEF_b__h2009;
  DEF_x__h1356 = DEF_a__h1233 ^ DEF_b__h1234;
  DEF_c__h1345 = DEF_a__h1128 & DEF_b__h1129;
  DEF_x__h1572 = DEF_a__h1449 ^ DEF_b__h1450;
  DEF_x__h1787 = DEF_a__h1665 ^ DEF_b__h1666;
  DEF_x__h2386 = DEF_a__h2263 ^ DEF_b__h2264;
  DEF_c__h3402 = DEF_a__h2008 & DEF_b__h2009;
  DEF_x__h2602 = DEF_a__h2479 ^ DEF_b__h2480;
  DEF_x__h2817 = DEF_a__h2695 ^ DEF_b__h2696;
  DEF_y__h3304 = DEF_b__h2264 & DEF_c__h3402;
  DEF_x__h2710 = DEF_a__h2695 & DEF_b__h2696;
  DEF_x__h2494 = DEF_a__h2479 & DEF_b__h2480;
  DEF_x__h2278 = DEF_a__h2263 & DEF_b__h2264;
  DEF_y__h3306 = DEF_a__h2263 & DEF_c__h3402;
  DEF_x__h3303 = DEF_x__h2278 | DEF_y__h3306;
  DEF_c__h3618 = DEF_x__h3303 | DEF_y__h3304;
  DEF_y__h3520 = DEF_b__h2480 & DEF_c__h3618;
  DEF_y__h3522 = DEF_a__h2479 & DEF_c__h3618;
  DEF_x__h3519 = DEF_x__h2494 | DEF_y__h3522;
  DEF_c__h3833 = DEF_x__h3519 | DEF_y__h3520;
  DEF_y__h3736 = DEF_b__h2696 & DEF_c__h3833;
  DEF_y__h3738 = DEF_a__h2695 & DEF_c__h3833;
  DEF_x__h3735 = DEF_x__h2710 | DEF_y__h3738;
  DEF_x__h2021 = DEF_c__h3402 | DEF_a__h2008;
  DEF_c__h2375 = DEF_x__h2021 | DEF_b__h2009;
  DEF_y__h2277 = DEF_b__h2264 & DEF_c__h2375;
  DEF_y__h2279 = DEF_a__h2263 & DEF_c__h2375;
  DEF_x__h2276 = DEF_x__h2278 | DEF_y__h2279;
  DEF_c__h2591 = DEF_x__h2276 | DEF_y__h2277;
  DEF_y__h2493 = DEF_b__h2480 & DEF_c__h2591;
  DEF_y__h2495 = DEF_a__h2479 & DEF_c__h2591;
  DEF_x__h2492 = DEF_x__h2494 | DEF_y__h2495;
  DEF_c__h2806 = DEF_x__h2492 | DEF_y__h2493;
  DEF_y__h2709 = DEF_b__h2696 & DEF_c__h2806;
  DEF_y__h2711 = DEF_a__h2695 & DEF_c__h2806;
  DEF_x__h2708 = DEF_x__h2710 | DEF_y__h2711;
  DEF_x__h1680 = DEF_a__h1665 & DEF_b__h1666;
  DEF_x__h1464 = DEF_a__h1449 & DEF_b__h1450;
  DEF_y__h1247 = DEF_b__h1234 & DEF_c__h1345;
  DEF_x__h1248 = DEF_a__h1233 & DEF_b__h1234;
  DEF_y__h1249 = DEF_a__h1233 & DEF_c__h1345;
  DEF_x__h1246 = DEF_x__h1248 | DEF_y__h1249;
  DEF_c__h1561 = DEF_x__h1246 | DEF_y__h1247;
  DEF_y__h1465 = DEF_a__h1449 & DEF_c__h1561;
  DEF_x__h1462 = DEF_x__h1464 | DEF_y__h1465;
  DEF_y__h1463 = DEF_b__h1450 & DEF_c__h1561;
  DEF_c__h1776 = DEF_x__h1462 | DEF_y__h1463;
  DEF_y__h1679 = DEF_b__h1666 & DEF_c__h1776;
  DEF_y__h1681 = DEF_a__h1665 & DEF_c__h1776;
  DEF_x__h1678 = DEF_x__h1680 | DEF_y__h1681;
  DEF_v__h186 = 511u & (((((((tUInt32)(DEF_x__h1678 | DEF_y__h1679 ? (tUInt8)31u & ((((((DEF_x__h2708 | DEF_y__h2709) << 4u) | ((DEF_x__h2817 ^ DEF_c__h2806) << 3u)) | ((DEF_x__h2602 ^ DEF_c__h2591) << 2u)) | ((DEF_x__h2386 ^ DEF_c__h2375) << 1u)) | ((tUInt8)1u & ~DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d64)) : (tUInt8)31u & ((((((DEF_x__h3735 | DEF_y__h3736) << 4u) | ((DEF_x__h2817 ^ DEF_c__h3833) << 3u)) | ((DEF_x__h2602 ^ DEF_c__h3618) << 2u)) | ((DEF_x__h2386 ^ DEF_c__h3402) << 1u)) | DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d64))) << 4u) | (((tUInt32)(DEF_x__h1787 ^ DEF_c__h1776)) << 3u)) | (((tUInt32)(DEF_x__h1572 ^ DEF_c__h1561)) << 2u)) | (((tUInt32)(DEF_x__h1356 ^ DEF_c__h1345)) << 1u)) | (tUInt32)(DEF_a__h1128 ^ DEF_b__h1129));
  DEF_IF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BI_ETC___d98 = DEF_v__h186 == DEF_realAns__h3959;
  DEF_NOT_cycle_EQ_8_AND_NOT_IF_SEL_ARR_1_8_63_102_1_ETC___d101 = DEF_NOT_cycle_EQ_8___d3 && !DEF_IF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BI_ETC___d98;
  DEF_NOT_cycle_EQ_8_AND_IF_SEL_ARR_1_8_63_102_177_1_ETC___d99 = DEF_NOT_cycle_EQ_8___d3 && DEF_IF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BI_ETC___d98;
  DEF_x__h4122 = DEF_x__h767 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_EQ_8___d2)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_cycle_EQ_8___d2)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_EQ_8_AND_IF_SEL_ARR_1_8_63_102_177_1_ETC___d99)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9",
		     &__str_literal_2,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_IF_SEL_ARR_1_8_63_102_1_ETC___d101)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9,9",
		     &__str_literal_3,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186,
		     DEF_realAns__h3959);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_IF_SEL_ARR_1_8_63_102_1_ETC___d101)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_cycle.METH_write(DEF_x__h4122);
}


/* Methods */


/* Reset routines */

void MOD_mkTbCSASimple::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbCSASimple::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbCSASimple::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbCSASimple::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_cycle.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbCSASimple::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbCSASimple &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbCSASimple::vcd_defs(tVCDDumpType dt, MOD_mkTbCSASimple &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTbCSASimple::vcd_prims(tVCDDumpType dt, MOD_mkTbCSASimple &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
}
