/*
 * Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
 * 
 * On Wed Sep  6 08:43:35 UTC 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRCASimple.h"


/* String declarations */
static std::string const __str_literal_2("%d + %d = %d", 12u);
static std::string const __str_literal_3("FAILED %d + %d gave %d instead of %d", 36u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRCASimple::MOD_mkTbRCASimple(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRCASimple::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_test", SYM_RULE);
}


/* Rule actions */

void MOD_mkTbRCASimple::RL_test()
{
  tUInt8 DEF_high__h191;
  tUInt32 DEF_x__h3091;
  tUInt8 DEF_y__h1375;
  tUInt8 DEF_x__h1374;
  tUInt8 DEF_y__h1373;
  tUInt8 DEF_x__h1372;
  tUInt8 DEF_y__h1591;
  tUInt8 DEF_x__h1590;
  tUInt8 DEF_y__h1589;
  tUInt8 DEF_x__h1588;
  tUInt8 DEF_y__h1807;
  tUInt8 DEF_x__h1806;
  tUInt8 DEF_y__h1805;
  tUInt8 DEF_x__h1804;
  tUInt8 DEF_y__h2022;
  tUInt8 DEF_y__h2020;
  tUInt8 DEF_x__h2019;
  tUInt8 DEF_y__h2276;
  tUInt8 DEF_x__h2275;
  tUInt8 DEF_y__h2274;
  tUInt8 DEF_x__h2273;
  tUInt8 DEF_y__h2492;
  tUInt8 DEF_x__h2491;
  tUInt8 DEF_y__h2490;
  tUInt8 DEF_x__h2489;
  tUInt8 DEF_y__h2708;
  tUInt8 DEF_x__h2707;
  tUInt8 DEF_y__h2706;
  tUInt8 DEF_c__h2803;
  tUInt8 DEF_x__h2814;
  tUInt8 DEF_c__h2588;
  tUInt8 DEF_x__h2599;
  tUInt8 DEF_c__h2372;
  tUInt8 DEF_x__h2383;
  tUInt8 DEF_c__h2008;
  tUInt8 DEF_x__h2168;
  tUInt8 DEF_c__h1902;
  tUInt8 DEF_x__h1913;
  tUInt8 DEF_c__h1687;
  tUInt8 DEF_x__h1698;
  tUInt8 DEF_c__h1471;
  tUInt8 DEF_x__h1482;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_SEL_ARR_1_8_63_102_177_128__ETC___d83;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d85;
  tUInt32 DEF_realAns__h2928;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d82;
  tUInt8 DEF_b__h1255;
  tUInt8 DEF_b__h1360;
  tUInt8 DEF_b__h1576;
  tUInt8 DEF_b__h1792;
  tUInt8 DEF_b__h2007;
  tUInt8 DEF_b__h2261;
  tUInt8 DEF_b__h2477;
  tUInt8 DEF_b__h2693;
  tUInt8 DEF_a__h1254;
  tUInt8 DEF_a__h1359;
  tUInt8 DEF_a__h1575;
  tUInt8 DEF_a__h1791;
  tUInt8 DEF_a__h2006;
  tUInt8 DEF_a__h2260;
  tUInt8 DEF_a__h2476;
  tUInt8 DEF_a__h2692;
  tUInt32 DEF_x__h893;
  tUInt8 DEF_x__h2021;
  tUInt8 DEF_NOT_cycle_EQ_8___d3;
  tUInt32 DEF_v__h186;
  tUInt8 DEF_cycle_EQ_8___d2;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5;
  tUInt8 DEF_x__h2705;
  DEF_x__h893 = INST_cycle.METH_read();
  switch (DEF_x__h893) {
  case 0u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)63u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)102u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)177u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)128u;
    break;
  case 6u:
  case 7u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)170u;
  }
  switch (DEF_x__h893) {
  case 0u:
  case 6u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)27u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)92u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)202u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)128u;
    break;
  case 7u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)170u;
  }
  DEF_cycle_EQ_8___d2 = DEF_x__h893 == 8u;
  DEF_NOT_cycle_EQ_8___d3 = !DEF_cycle_EQ_8___d2;
  DEF_a__h2692 = (tUInt8)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 7u);
  DEF_a__h2476 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 6u));
  DEF_a__h2260 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 5u));
  DEF_a__h2006 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 4u));
  DEF_a__h1791 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 3u));
  DEF_a__h1254 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5);
  DEF_a__h1575 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 2u));
  DEF_a__h1359 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 1u));
  DEF_b__h2693 = (tUInt8)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 7u);
  DEF_b__h2477 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 6u));
  DEF_b__h2261 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 5u));
  DEF_b__h2007 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 4u));
  DEF_x__h2021 = DEF_a__h2006 & DEF_b__h2007;
  DEF_b__h1792 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 3u));
  DEF_b__h1360 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 1u));
  DEF_b__h1576 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 2u));
  DEF_b__h1255 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8);
  DEF_realAns__h2928 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8))));
  DEF_x__h1482 = DEF_a__h1359 ^ DEF_b__h1360;
  DEF_c__h1471 = DEF_a__h1254 & DEF_b__h1255;
  DEF_x__h1698 = DEF_a__h1575 ^ DEF_b__h1576;
  DEF_x__h1913 = DEF_a__h1791 ^ DEF_b__h1792;
  DEF_x__h2168 = DEF_a__h2006 ^ DEF_b__h2007;
  DEF_x__h2383 = DEF_a__h2260 ^ DEF_b__h2261;
  DEF_x__h2599 = DEF_a__h2476 ^ DEF_b__h2477;
  DEF_x__h2814 = DEF_a__h2692 ^ DEF_b__h2693;
  DEF_x__h2707 = DEF_a__h2692 & DEF_b__h2693;
  DEF_x__h2491 = DEF_a__h2476 & DEF_b__h2477;
  DEF_x__h2275 = DEF_a__h2260 & DEF_b__h2261;
  DEF_x__h1806 = DEF_a__h1791 & DEF_b__h1792;
  DEF_x__h1590 = DEF_a__h1575 & DEF_b__h1576;
  DEF_y__h1373 = DEF_b__h1360 & DEF_c__h1471;
  DEF_x__h1374 = DEF_a__h1359 & DEF_b__h1360;
  DEF_y__h1375 = DEF_a__h1359 & DEF_c__h1471;
  DEF_x__h1372 = DEF_x__h1374 | DEF_y__h1375;
  DEF_c__h1687 = DEF_x__h1372 | DEF_y__h1373;
  DEF_y__h1589 = DEF_b__h1576 & DEF_c__h1687;
  DEF_y__h1591 = DEF_a__h1575 & DEF_c__h1687;
  DEF_x__h1588 = DEF_x__h1590 | DEF_y__h1591;
  DEF_c__h1902 = DEF_x__h1588 | DEF_y__h1589;
  DEF_y__h1805 = DEF_b__h1792 & DEF_c__h1902;
  DEF_y__h1807 = DEF_a__h1791 & DEF_c__h1902;
  DEF_x__h1804 = DEF_x__h1806 | DEF_y__h1807;
  DEF_c__h2008 = DEF_x__h1804 | DEF_y__h1805;
  DEF_y__h2020 = DEF_b__h2007 & DEF_c__h2008;
  DEF_y__h2022 = DEF_a__h2006 & DEF_c__h2008;
  DEF_x__h2019 = DEF_x__h2021 | DEF_y__h2022;
  DEF_c__h2372 = DEF_x__h2019 | DEF_y__h2020;
  DEF_y__h2274 = DEF_b__h2261 & DEF_c__h2372;
  DEF_y__h2276 = DEF_a__h2260 & DEF_c__h2372;
  DEF_x__h2273 = DEF_x__h2275 | DEF_y__h2276;
  DEF_c__h2588 = DEF_x__h2273 | DEF_y__h2274;
  DEF_y__h2490 = DEF_b__h2477 & DEF_c__h2588;
  DEF_y__h2492 = DEF_a__h2476 & DEF_c__h2588;
  DEF_x__h2489 = DEF_x__h2491 | DEF_y__h2492;
  DEF_c__h2803 = DEF_x__h2489 | DEF_y__h2490;
  DEF_y__h2706 = DEF_b__h2693 & DEF_c__h2803;
  DEF_y__h2708 = DEF_a__h2692 & DEF_c__h2803;
  DEF_x__h2705 = DEF_x__h2707 | DEF_y__h2708;
  DEF_x__h3091 = DEF_x__h893 + 1u;
  DEF_high__h191 = (tUInt8)31u & ((((((DEF_x__h2705 | DEF_y__h2706) << 4u) | ((DEF_x__h2814 ^ DEF_c__h2803) << 3u)) | ((DEF_x__h2599 ^ DEF_c__h2588) << 2u)) | ((DEF_x__h2383 ^ DEF_c__h2372) << 1u)) | (DEF_x__h2168 ^ DEF_c__h2008));
  DEF_v__h186 = 511u & (((((((tUInt32)(DEF_high__h191)) << 4u) | (((tUInt32)(DEF_x__h1913 ^ DEF_c__h1902)) << 3u)) | (((tUInt32)(DEF_x__h1698 ^ DEF_c__h1687)) << 2u)) | (((tUInt32)(DEF_x__h1482 ^ DEF_c__h1471)) << 1u)) | (tUInt32)(DEF_a__h1254 ^ DEF_b__h1255));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d82 = DEF_v__h186 == DEF_realAns__h2928;
  DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d85 = DEF_NOT_cycle_EQ_8___d3 && !DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d82;
  DEF_NOT_cycle_EQ_8_AND_SEL_ARR_1_8_63_102_177_128__ETC___d83 = DEF_NOT_cycle_EQ_8___d3 && DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d82;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_EQ_8___d2)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_cycle_EQ_8___d2)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_EQ_8_AND_SEL_ARR_1_8_63_102_177_128__ETC___d83)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9",
		     &__str_literal_2,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d85)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9,9",
		     &__str_literal_3,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186,
		     DEF_realAns__h2928);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d85)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_cycle.METH_write(DEF_x__h3091);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRCASimple::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRCASimple::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRCASimple::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRCASimple::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_cycle.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRCASimple::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbRCASimple &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRCASimple::vcd_defs(tVCDDumpType dt, MOD_mkTbRCASimple &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTbRCASimple::vcd_prims(tVCDDumpType dt, MOD_mkTbRCASimple &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
}
